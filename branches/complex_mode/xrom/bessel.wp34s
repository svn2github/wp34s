/* This file is part of 34S.
 * 
 * 34S is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 34S is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifdef INCLUDE_XROM_BESSEL
/**************************************************************************/
/* First order real argument Bessel functions Jn and In.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/bessel.php
 *
 * MORE: make this work for integer order and large arguments.
 */
			XLBL"BES_IN"
				xIN DYADIC
				SPEC?
					JMP ret_posinf
				SF .01
				JMP bessel1_common

			XLBL"BES_JN"
				xIN DYADIC
				SPEC?
					JMP ret_0
bessel1_common::		GSB bessel1
				xOUT xOUT_NORMAL

/* Main first order subroutine entry point.
 * Takes the arguments on the stack as usual and uses regisers I, J and K
 * as temporaries.  Convergence will be to double precision always.
 *
 * Returns Jn if flag .01 is clear and In if it is set.
 */
bessel1::			[cmplx]x[!=]0?
					JMP bessel1_nonzero
				Num 1
				RTN

bessel1_nonzero::		x=0?
					RTN
				Num 1/2
				[times]
				[cmplx]STO J
				SWAP
				INT?
					JMP bessel1_int
				Num 1
				FILL
				STO I
bessel1_lp1::			x[<->] Z
				FC? .01
					+/-
				RCL[times] J
				RCL[times] J
				RCL I
				STO/ Y
				RCL K
				+
				/
				INC I
				[<->] XYYY
				STO+ Y
				x[<->] Z
				CNVG? CVG_RELATIVE_DBL
					JMP bessel1_fin
				JMP bessel1_lp1

bessel1_fin::			RCL J
				RCL K
				y[^x]
				[times]
				RCL K
				x!
				/
				RTN

bessel1_int::			ERR ERR_DOMAIN
				RTN

/**************************************************************************/
/* Second order real argument Bessel functions Yn and Kn.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/bessel.php
 *
 * MORE: make this work natively for reals and integer order.
 */
			XLBL"BES_KN"
				xIN DYADIC
				x=0?
					JMP ret_posinf
				SPEC?
					JMP ret_0
				LocR 3
				SF .01
				JMP bessel2_entry

			XLBL"BES_YN"
				xIN DYADIC
				x=0?
					JMP ret_neginf
				SPEC?
					JMP ret_0
				LocR 3

bessel2_entry::			[cmplx]STO .00
				SWAP
				INT?
					JMP bessel2_int
				+/-
				SWAP
				GSB bessel1
				STO .02
				[cmplx]RCL .00
				GSB bessel1
				FS? .01
					JMP bessel2_Kn
				Num [pi]
				RCL[times] .01
				COS
				[times]
				RCL- .02
				JMP bessel_denom

bessel2_Kn::			RCL- .02
				+/-
				Num [pi]
				[times]
				Num 1/2
				[times]
bessel_denom::			Num [pi]
				RCL[times] .01
				SIN
				/
				xOUT xOUT_NORMAL


bessel2_int::			ERR ERR_DOMAIN
				RTN

/**************************************************************************/
/* First order complex argument and order Bessel functions Jn and In.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/bessel.php
 *
 * MORE: make this work natively for large arguments and perhaps integer order.
 */
			XLBL"CPX_IN"
				xIN DYADIC_COMPLEX
				LocR 11
				SF .01
				GSB cpx_bessel1_entry
				xOUT xOUT_NORMAL

			XLBL"CPX_JN"
				xIN DYADIC_COMPLEX
				LocR 11
				GSB cpx_bessel1_entry
				xOUT xOUT_NORMAL

/* Main first order complex suboutine entry point.
 * Takes the arguments on the stack as usual and uses regisers .00 through .10
 * as temporaries.  Convergence will be to double precision always.
 *
 * Returns Jn if flag .01 is clear and In if it is set.
 */
cpx_bessel1_entry::		[cmplx]STO .01
				CSWAP
				[cmplx]STO .05
				_INT 2
				STO/ .01
				STO/ .02
				[cmplx]RCL .01
				[cmplx]RCL[times] X
				[cmplx]STO .09
				[cmplx]Num 1
				STO .00
				[cmplx]STO .03
				[cmplx]STO .07
cpx_bessel1_loop::		[cmplx]RCL .09
				[cmplx]RCL[times] .03
				RCL .00
				FC? .01
					+/-
				STO/ Z
				/
				[cmplx]RCL .05
				RCL+ .00
				[cmplx]/
				[cmplx]STO .03
				[cmplx]RCL+ .07
				[cmplx]x[<->] .07
				[cmplx]RCL .07
				INC .00
				CNVG? CVG_COMPLEX_DBL
					JMP cpx_bessel1_fin
				JMP cpx_bessel1_loop
cpx_bessel1_fin::		[cmplx]RCL .01
				[cmplx]RCL .05
				[cmplx]y[^x]
				[cmplx][times]
				[cmplx]RCL .05
				INC X
				[cmplx][GAMMA]
				[cmplx]/
				RTN


/**************************************************************************/
/* Second order real argument Bessel functions Yn and Kn.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/bessel.php
 *
 * MORE: make this work natively for large arguments and integer order.
 */
			XLBL"CPX_KN"
				xIN DYADIC_COMPLEX
				LocR 15
				SF .01
				JMP cpx_bessel2_entry

			XLBL"CPX_YN"
				xIN DYADIC_COMPLEX
				LocR 15

cpx_bessel2_entry::		[cmplx]STO .11
				CSWAP
				INT?
					JMP cpx_bessel2_int_check
	    			CSWAP
cpx_bessel2_notint::		GSB cpx_bessel1_entry
				FS? .01
					JMP cpx_bessel2_kn_skip
				[cmplx]Num [pi]
				[cmplx]RCL[times] .05
				[cmplx]COS
				[cmplx][times]
cpx_bessel2_kn_skip::		[cmplx]STO .13
				[cmplx]RCL .05
				[cmplx]+/-
				[cmplx]RCL .11
				GSB cpx_bessel1_entry
				[cmplx]STO- .13
				[cmplx]Num [pi]
				[cmplx]RCL[times] .05
				[cmplx]SIN
				[cmplx]STO/ .13
				FS? .01
					JMP cpx_bessel2_2pi
				[cmplx]Num 1
				+/-
				JMP cpx_bessel2_skip
cpx_bessel2_2pi::		[cmplx]Num [pi]
				Num 1/2
				[times]
cpx_bessel2_skip::		[cmplx]RCL[times] .13
				xOUT xOUT_NORMAL

cpx_bessel2_int_check::		SWAP
				x=0?
					JMP cpx_bessel2_int
				[<->] ZTYX
				JMP cpx_bessel2_notint
cpx_bessel2_int::		[<->] ZTYX
				ERR ERR_DOMAIN

#endif
