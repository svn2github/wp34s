/* This file is part of 34S.
 * 
 * 34S is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 34S is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifdef INCLUDE_INTEGER_DIVIDE
		XLBL"cpx_IDIV"
			xIN DYADIC_COMPLEX
			[cmplx]/
			JMP cpx_trunc
#endif

		XLBL"cpx_ROUND"
			xIN MONADIC_COMPLEX
			ROUND
			x[<->] Y
			ROUND
			JMP cpx_trunc_exit

		XLBL"cpx_FRAC"
			xIN MONADIC_COMPLEX
			FP
			x[<->] Y
			FP
			JMP cpx_trunc_exit

		XLBL"cpx_TRUNC"
			xIN MONADIC_COMPLEX
cpx_trunc::		IP
			x[<->] Y
			IP
cpx_trunc_exit::	x[<->] Y
			xOUT xOUT_NORMAL

		XLBL"cpx_CONJ"
			xIN MONADIC_COMPLEX
			GSB cpx_conj
			xOUT xOUT_NORMAL

cpx_conj::		x[<->] Y
			+/-
			x[<->] Y
			RTN

		XLBL"cpx_FACT"
			xIN MONADIC_COMPLEX
			INC X
			[cmplx][GAMMA]
			xOUT xOUT_NORMAL


		/* sign(a + i b) = (a + i b) / |a + i b| */
		XLBL"cpx_SIGN"
			xIN MONADIC_COMPLEX
			SPEC?
				JMP sign_real_special
			x=0?
				JMP sign_real_zero
			[<->] YXXY
			SPEC?
				JMP sign_cmplx_special
			x=0?
				JMP sign_cmplx_zero
			[cmplx]ABS
			[cmplx]/
			xOUT xOUT_NORMAL

sign_real_zero::	SWAP
			GSB sign
sign_swap_exit::	SWAP
			xOUT xOUT_NORMAL

sign_cmplx_zero::	SWAP
			GSB sign
			xOUT xOUT_NORMAL

sign_real_special::	GSB sign
			SWAP
			SPEC?
				JMP ret_NaN
			CLx
			JMP sign_swap_exit
			
sign_cmplx_special::	GSB sign
			Num 0
			xOUT xOUT_NORMAL


/**************************************************************************/
/* Dot and cross products.
 *
 *	DOT returning x times z plus y times t in X and clearing Y,
 *	CROSS returning x times t minus z times y in X and clearing Y
 */
		XLBL"cpx_DOT"
			xIN DYADIC_COMPLEX
			GSB cpx_conj
			JMP cpx_dot_cross_exit

		XLBL"cpx_CROSS"
			xIN DYADIC_COMPLEX
			z[<->] T
cpx_dot_cross_exit::	[cmplx][times]
			Num 0
			SWAP
			xOUT xOUT_NORMAL


/**************************************************************************/
/* Complex squares and cubes.
 */
		XLBL"cpx_x2"
			xIN MONADIC_COMPLEX
			[cmplx]RCL[times] X
			xOUT xOUT_NORMAL

		XLBL"cpx_x3"
			xIN MONADIC_COMPLEX
			[cmplx]RCL[times] X
			[cmplx]RCL[times] L
			xOUT xOUT_NORMAL

/**************************************************************************/
/* Complex inverse trig functions.
 */
		XLBL"cpx_ASIN"
			xIN MONADIC_COMPLEX
			GSB cpx_asin
			xOUT xOUT_NORMAL

cpx_asin::		+/-
			x[<->] Y
			GSB cpx_asinh
			x[<->] Y
			+/-
			RTN

		XLBL"cpx_ACOS"
			xIN MONADIC_COMPLEX
			GSB cpx_asin
			[cmplx]+/-
			Num [pi]/2
			+
			xOUT xOUT_NORMAL

		XLBL"cpx_ATAN"
			xIN MONADIC_COMPLEX
			RCL X
			+/-
			RCL Z
			INC X
			[cmplx]LN
			RCL Z
			Num 1
			RCL- B
			[cmplx]LN
			[cmplx]-
			Num 1/2
			Num 0
			[cmplx][times]
			xOUT xOUT_NORMAL

/**************************************************************************/
/* Complex inverse hyperbolic trig functions.
 */
		XLBL"cpx_ASINH"
			xIN MONADIC_COMPLEX
			GSB cpx_asinh
			xOUT xOUT_NORMAL
			
cpx_asinh::		x[>=]0?
				JMP cpx_asinh_pos
			SF .00
			[cmplx]+/-
cpx_asinh_pos::		[cmplx]FILL
			[cmplx]RCL[times] X
			INC X
			[cmplx][sqrt]
			[cmplx]+
			[cmplx]LN
			FS? .00
				[cmplx]+/-
			RTN

		XLBL"cpx_ACOSH"
			xIN MONADIC_COMPLEX
			[cmplx]FILL
			INC X
			[cmplx][sqrt]
			[cmplx]x[<->] Z
			DEC X
			[cmplx][sqrt]
			[cmplx][times]
			[cmplx]+
			[cmplx]LN
			xOUT xOUT_NORMAL

		XLBL"cpx_ATANH"
			xIN MONADIC_COMPLEX
			[cmplx]# 1
			[cmplx]x[<->] Z
			[cmplx]-
			[cmplx]RCL L
			INC X
			[cmplx]x[<->] Z
			[cmplx]/
			[cmplx]LN
			[cmplx]Num 1/2
			[cmplx][times]
			xOUT xOUT_NORMAL


/**************************************************************************/
/* Complex logarithm to any base.
 */
		XLBL"cpx_LOGXY"
			xIN DYADIC_COMPLEX
			[cmplx]LN
			[cmplx]x[<->] Z
			[cmplx]LN
			[cmplx]x[<->] Z
			[cmplx]/
			xOUT xOUT_NORMAL

		XLBL"cpx_LOG10"
			xIN MONADIC_COMPLEX
			[cmplx]LN
			[cmplx]# L10[^-1]
			JMP cpx_log_common

		XLBL"cpx_LOG2"
			xIN MONADIC_COMPLEX
			[cmplx]LN
			[cmplx]# LN2[^-1]
cpx_log_common::	[cmplx][times]
			xOUT xOUT_NORMAL
			
/**************************************************************************/
/* Complex powers.
 */
		XLBL"cpx_POW10"
			xIN MONADIC_COMPLEX
			[cmplx]_INT 10
			JMP cpx_pow_common

		XLBL"cpx_POW2"
			xIN MONADIC_COMPLEX
			[cmplx]_INT 2
cpx_pow_common::	CSWAP
			[cmplx]y[^x]
			xOUT xOUT_NORMAL
		
/**************************************************************************/
/* Complex (e^z)-1.
 *
 * With a bit of algebra it can be shown that:
 *	e^z - 1 = -exp(z/2) * 2*i*sin(i*z/2)
 * there are no obvious loss of accuracy issues inherent here.
 */

		XLBL"cpx_EXPM1"
			xIN MONADIC_COMPLEX
                        [cmplx]Num 1/2
                        [cmplx][times]
                        [cmplx]e[^x]
                        [cmplx]RCL L
                        SWAP
                        +/-
                        [cmplx]SIN
                        _INT 2
                        Num 0
                        [cmplx][times]
                        [cmplx]+/-
                        [cmplx][times]
                        xOUT xOUT_NORMAL

/**************************************************************************/
/* Complex LN(1+z)
 *
 * For |z| small, we use the series expansion:
 *
 *	log(1+z) = z - z^2/2 + z^3/3 - z^4/4 + ...
 *
 * Thresholding |z| against 1e-5, means each term after the first will produce
 * approximately five more digits.
 */

/* Define the number of terms to sum.  We sum one more term than this and this
 * parameter must be even.  To get 34 digits (double precision), we therefore
 * need at least eight terms and nine works out nicely.
 */
#define NUM_LNP1_TERMS	(8)

		XLBL"cpx_LN1P"
			xIN MONADIC_COMPLEX
			[cmplx]FILL
			[cmplx]ABS
			+
			Num 1
			SDR 4
			x>? Y
				JMP cpx_ln1p_small
			[cmplx]DROP
			INC X
			[cmplx]LN
			xOUT xOUT_NORMAL

cpx_ln1p_small::	LocR 01
			[cmplx]DROP
			[cmplx]_INT NUM_LNP1_TERMS
			STO .00
			INC X
			1/x
			[cmplx]/
cpx_ln1p_loop::		Num 0
			RCL .00
			1/x
			[cmplx]-
			[cmplx][times]
			DEC .00
			Num 0
			RCL .00
			1/x
			[cmplx]+
			[cmplx][times]
			DSZ .00
				JMP cpx_ln1p_loop
			xOUT xOUT_NORMAL

#undef NUM_LNP1_TERMS
