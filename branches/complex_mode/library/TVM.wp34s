/*

=================================
* Extended TVM-Solver for WP34s *      Ver. 3.1      Author: Franz Huber
=================================

Keyboard-Layout:
----------------
    N       I      PV      PMT      FV
[A][A]  [A][B]  [A][C]  [A][D]  [A][->]

    NP        NI
[A][STO]  [A][RCL]

Flags/Registers/Labels:
-----------------------
       00     01   02   03   04   05   06   07   08   09   10   11  12
Flag   Entry? --   2I?  --   --   --   <0?  =0?  --   --   --   --  --
Reg.   Key?   N    I    PV   PMT  FV   NP   NI   i    k    im   I1  I2
Lbl.   Start  N?   I?   PV?  PMT? FV?  Init I->i TVM TVM' i->I  --  --

Remarks:
========
- [XEQ]'TVM' to initialize registers and parameters!
- enter values for parameters NP,NI if desired (default=1)
- all financial keys for N,I,PV,PMT,FV and NP,NI work as follows:
  input+key stores the value, key alone calculates the value
  (or just recalls it for NP and NI)
- [R/S] resets the ENTRY? flag (e.g. after own calculations)
- alternative method to use the program:
  [STO/RCL/XEQ]01-05 to store/recall/calculate N,I,PV,PMT,FV
  (result after [XEQ] is not stored automatically!)
  [STO/RCL]06-07 to store/recall NP,NI
- iterative solving for I is limited to [-.999,max(2,I%->i)], i.e.
  from -99.9% to 200% (or I%->i) interest rate per payment period
  (the upper limit I% can be changed with I [STO]02 or I [A][B])
- if solving for I returns 2 possible solutions ("I1="), then just 
  press [R/S] to switch between I1 and I2 (stored in R11 and R12)
- error messages are displayed if invalid values have been entered:
  (don't use [R/S] after any error message!)
    NP=0 -> "Invalid parameter"
    both N=0 and I=0 -> "Invalid data"
    calculate FV if N=0 -> "Bad mode"
    no solution found for I -> "No root found"
    other invalid entries -> "Domain error" or "+/- Infinity"

Values:
-------
N = total number of periods (or payments)
    N=0 for perpetual payments (N=infinite)
        (not allowed if I=0! -> Error: "Invalid data")

I = annual interest rate (in % per year, -99.9%..999%)
    I=0 for no compounding
        (not allowed if N=0! -> Error: "Invalid data")

PV  = present value (or payment)
PMT = periodical payment
FV  = future value (or payment)
      (not defined for N=0! -> Error: "Bad mode")

Parameters:
-----------
NP = payment frequency PF (payment periods per year)
     NP>0 postnumerand payments (at END of periods)
     NP<0 prenumerand payments (at BEGin of periods)
     NP=0 not allowed! -> Error: "Invalid parameter"

NI = compounding frequency CF (interest periods per year)
     NI>0 decursive interest (compound at end of periods)
     NI<0 anticipative discount (compound at begin of periods)
     NI=0 continuous (theoretical) compounding (NI=infinite)
     |NI|=1 -> effective interest rate
     |NI|>1 -> nominal interest rate

Used formulas:
--------------

    /  (1+I/(100*NI))^(NI/abs(NP))-1  for NI!=0
i = |
    \  e^(I/(100*abs(NP)))-1          for NI=0

    /  1    for NP>0
k = |
    \  1+i  for NP<0

          /  PV*(1+i)^N + PMT*((i+1)^N-1)*k/i + FV = 0  for I!=0 & N!=0
TVM eqn:  |  PV + PMT*N + FV = 0                        for I=0
          \  PV + PMT*k/i = 0                           for N=0

TVM expr: ((1+i)^N-1)*(PMT/i + beg?PMT + PV) + PV + FV  (SLV iteration for i)

*/


001 LBL'TVM'    // extended TVM-Solver V3.1
002 CL[alpha]
003 [alpha]'TVM'
004 [alpha] [space]
005 [alpha]'Sol'
006 [alpha]'ver'
007 VIEW[alpha]
008 # 013       // Initialize registers & parameters
009 SDR 02
010 R-CLR
011 1
012 STO 06	// NP=1 (annual payments at END of year or period)
013 STO 07	// NI=1 (annual compounding at end of year or period)
014 CLSTK

015 LBL 00	// return after input or calculation
016 FS?C 00
017 SKIP 003
018 STO L
019 CLSTK	// remove intermediate results
020 RCL L
021 STOP	// wait for input or calculation
022 BACK 001	// [R/S] -> clears ENTRY? flag

023 LBL A	// prefix [A] for [A]..[->]
024 CL[alpha]
025 [alpha]'N[narrow-space][narrow-space]'
026 [alpha]'I[narrow-space][narrow-space]'
027 [alpha]'PV[narrow-space]'
028 [alpha]'PMT'
029 [alpha]'[narrow-space]FV'
030 ENTRY?
031 SKIP 002
032 VIEW[alpha]
033 SKIP 001
034 VW[alpha]+ X
035 PSE 99
036 CL[alpha]
037 KEY? 00
038 SKIP 002
039 LBL?[->]00
040 XEQ[->]00
041 GTO 00

042 LBL 11
043 ENTRY?
044 SF 00
045 FC? 00
046 XEQ 01
047 STO 01
048 CL[alpha]
049 [alpha]'N='
050 VW[alpha]+ 01
051 RTN

052 LBL 12
053 CF 02
054 ENTRY?
055 SF 00
056 FC? 00
057 XEQ 02
058 STO 02
059 CL[alpha]
060 FC? 02
061 SKIP 007
062 x=? 11
063 [alpha]'I1='
064 x=? 12
065 [alpha]'I2='
066 PROMPT
067 x[<->] Y
068 BACK 010
069 [alpha]'I='
070 VW[alpha]+ 02
071 RTN

072 LBL 13
073 ENTRY?
074 SF 00
075 FC? 00
076 XEQ 03
077 STO 03
078 CL[alpha]
079 [alpha]'PV='
080 VW[alpha]+ 03
081 RTN

082 LBL 14
083 ENTRY?
084 SF 00
085 FC? 00
086 XEQ 04
087 STO 04
088 CL[alpha]
089 [alpha]'PMT'
090 [alpha] =
091 VW[alpha]+ 04
092 RTN

093 LBL 15
094 ENTRY?
095 SF 00
096 FC? 00
097 XEQ 05
098 STO 05
099 CL[alpha]
100 [alpha]'FV='
101 VW[alpha]+ 05
102 RTN

103 LBL 21
104 ENTRY?
105 SF 00
106 FC?S 00
107 RCL 06
108 STO 06
109 CL[alpha]
110 [alpha]'NP='
111 VW[alpha]+ 06
112 RTN

113 LBL 22
114 ENTRY?
115 SF 00
116 FC?S 00
117 RCL 07
118 STO 07
119 CL[alpha]
120 [alpha]'NI='
121 VW[alpha]+ 07
122 RTN

123 LBL 01	// N=?
124 XEQ 06
125 XEQ 07
126 x=0?
127 SKIP 014
128 RCL 04
129 RCL[times] 09
130 RCL/ 08
131 RCL- 05
132 RCL L
133 RCL+ 03
134 x=0?
135 SKIP 009
136 /
137 LN
138 x[<->] Y
139 LN1+x
140 /
141 SKIP 003
142 RCL- 03
143 RCL- 05
144 RCL/ 04
145 RTN

146 LBL 02	// I=?
147 XEQ 06
148 RCL 01
149 x[!=]0?
150 SKIP 006
151 RCL- 04	// N=0
152 RCL 03
153 FS? 06
154 RCL+ 04
155 /
156 GTO 10
157 RCL 04
158 x[!=]0?
159 SKIP 006
160 RCL- 05	// PMT=0
161 RCL/ 03
162 RCL 01
163 XROOT
164 DEC X
165 GTO 10
166 CL[alpha]
167 [alpha]'Sol'
168 [alpha]'vin'
169 [alpha]'g[space]'
170 [alpha]'...'
171 VIEW[alpha]
172 1
173 SDR 03
174 DEC X       // lower limit: -99.9%
175 STO 11
176 XEQ 08
177 x[!=]0?     // yl!=0?
178 SKIP 005
179 1
180 SDR 04
181 +/-
182 RCL+ 11
183 BACK 008
184 STO 10      // yl
185 RCL 02
186 XEQ 07
187 2
188 MAX         // upper limit: max(200%, I%->i)
189 STO 12
190 XEQ 08
191 x[!=]0?     // yr!=0?
192 SKIP 004
193 1
194 SDR 03
195 RCL+ 12
196 BACK 007
197 RCL[times] 10
198 x<0?        // yr*yl<0?
199 SKIP 044    // one solution
200 RCL 11
201 XEQ 09
202 RCL[times] 10
203 x[>=]0?     // yl'*yl>=0?
204 ERR 20      // no solution!
205 x[<->] L
206 RCL 12
207 XEQ 09
208 [times]
209 x[>=]0?     // yl'*yr'>=0?
210 ERR 20      // no solution!
211 RCL 11
212 RCL 12
213 SLV 09      // solve TVM'=0
214 SKIP 001
215 ERR 20
216 x[<->] 10
217 RCL 10
218 XEQ 08
219 x=0?
220 SKIP 021    // double-solution
221 [times]
222 x[>=]0?     // yl*ym>=0?
223 ERR 20      // no solution!
224 RCL 11
225 RCL 10
226 SLV 08      // solve TVM=0 (1st solution)
227 SKIP 001
228 ERR 20
229 XEQ 10
230 STO 11
231 RCL 10
232 RCL 12
233 SLV 08      // solve TVM=0 (2nd solution)
234 SKIP 001
235 ERR 20
236 XEQ 10
237 STO 12
238 CLSTK
239 [cmplx]RCL 11
240 SF 02
241 SKIP 026
242 RCL 10      // double-solution
243 GTO 10
244 RCL 11      // one solution
245 RCL 12
246 SLV 08	// solve TVM=0
247 SKIP 001
248 ERR 20
249 LBL 10	// i -> I
250 1
251 +/-
252 x[<->] Y
253 x=? Y
254 SKIP 010
255 x=0?
256 SKIP 011
257 LN1+x
258 RCL 06
259 ABS
260 [times]
261 FS? 07
262 SKIP 003
263 RCL/ 07
264 e[^x]-1
265 RCL[times] 07
266 SDL 02
267 RDP 12
268 RTN

269 LBL 03	// PV=?
270 XEQ 06
271 XEQ 07
272 x=0?
273 SKIP 016
274 RCL 04
275 RCL[times] 09
276 RCL/ 08
277 RCL 01
278 x=0?
279 SKIP 008
280 RCL Y
281 RCL- 05
282 x[<->] Y
283 RCL 08
284 LN1+x
285 [times]
286 e[^x]
287 /
288 RCL- Y
289 SKIP 005
290 RCL- 01
291 x=0?
292 ERR 18	// N=0 and I=0! -> Error: "Invalid data"
293 RCL[times] 04
294 RCL- 05
295 RTN

296 LBL 04	// PMT=?
297 XEQ 06
298 XEQ 07
299 x=0?
300 SKIP 014
301 RCL 01
302 x=0?
303 SKIP 007
304 RCL 03
305 RCL+ 05
306 RCL 08
307 LN1+x
308 RCL[times] 01
309 e[^x]-1
310 /
311 RCL+ 03
312 RCL[times] 08
313 RCL/ 09
314 SKIP 006
315 RCL 01
316 x=0?
317 ERR 18	// N=0 and I=0! -> Error: "Invalid data"
318 RCL 03
319 RCL+ 05
320 RCL/ 01
321 +/-
322 RTN

323 LBL 05	// FV=?
324 XEQ 06
325 0
326 x=? 01
327 ERR 13	// FV invalid for N=0! -> Error: "Bad mode"
328 STO 05
329 XEQ 07
330 XEQ 08
331 +/-
332 RTN

333 LBL 06	// check parameters (NP,NI)
334 RCL 06
335 x=0?
336 ERR 16	// NP=0! -> Error: "Invalid parameter"
337 CF 06
338 x<0?
339 SF 06	// set payments at begin of period (BEGin mode)
340 RCL 07
341 CF 07
342 x=0?
343 SF 07	// set continuous (theoretical) compounding
344 [cmplx]DROP
345 RTN

346 LBL 07	// I -> i,k
347 1
348 STO 09
349 RCL[times] 02
350 x=0?
351 SKIP 012
352 SDR 02
353 FS? 07
354 SKIP 003
355 RCL/ 07
356 LN1+x
357 RCL[times] 07
358 RCL 06
359 ABS
360 /
361 e[^x]-1
362 FS? 06
363 STO+ 09
364 STO 08
365 RTN

366 LBL 08	// TVM expression for SLV routine
367 STO 08
368 x[!=]0?
369 SKIP 003
370 RCL+ 01     // i=0
371 RCL 04
372 SKIP 008
373 LN1+x
374 RCL[times] 01
375 e[^x]-1
376 RCL 04
377 RCL/ 08
378 FS? 06
379 RCL+ 04
380 RCL+ 03
381 [times]
382 RCL+ 03
383 RCL+ 05
384 RTN

385 LBL 09	// TVM' expression for SLV routine
386 STO 08
387 x[!=]0?
388 SKIP 010
389 RCL+ 01     // i=0
390 DEC X
391 2
392 /
393 RCL[times] 04
394 FS? 06
395 RCL+ 04
396 RCL+ 03
397 RCL[times] 01
398 SKIP 21
399 LN1+x
400 RCL 01
401 DEC X
402 [times]
403 e[^x]
404 RCL[times] 01
405 RCL 04
406 RCL/ 08
407 FS? 06
408 RCL+ 04
409 RCL+ 03
410 [times]
411 RCL 08
412 LN1+x
413 RCL[times] 01
414 e[^x]-1
415 RCL[times] 04
416 RCL 08
417 x[^2]
418 /
419 -
420 END

