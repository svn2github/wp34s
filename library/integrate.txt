This file is part of 34S.

34S is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

34S is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with 34S.  If not, see <http://www.gnu.org/licenses/>.




This code is the source for the internal integration routine.

The only change of note is the call to the user's routine is done as XEQ 00
instead of XEQUSR.


	001: LBL B
	002: SPEC?
	003: GTO 08
	004: X<>Y
	005: SPEC?
	006: GTO 08
	007: X=? Y		// Check if range is zero
	008: GTO 09
	009: cENTER		// Compute (x-y)/2 and (x+y)/2
	010: +
	011: 2
	012: /
	013: X<> Z
	014: -
	015: 2
	016: /
	017: cSTO 00		// Also stores the midpoint
	018: iC 00		// Initialise the summations to zero
	019: STO 02
	020: STO 03
	021: iC 03		// Loop through the common points (15.02903)
	022: STO 04
	023: XEQ 04
	024: XEQ 00
	025: SPEC?
	026: GTO 08
	027: XEQ 07
	028: XEQ 05
	029: XEQ 00
	030: SPEC?
	031: GTO 08
	032: XEQ 07
	033: ISG 04
	034: BACK 11
	035: RCL 00
	036: STO* 02
	037: RCL 01		// Evaluate at midpoint for the Kronrod estimate
	038: FILL
	039: XEQ 00
	040: SPEC?
	041: GTO 02
	042: iC 04		// 0.1494455...
	043: *
	044: STO+ 03
	045: iC 02		// Now loop through the Kronrod points (5.01402)
	046: STO 04
	047: XEQ 04
	048: XEQ 00
	049: SPEC?
	050: GTO 02
	051: XEQ 06
	052: XEQ 05
	053: XEQ 00
	054: SPEC?
	055: GTO 02
	056: XEQ 06
	057: ISG 04
	058: BACK 11
	059: RCL 00
	060: STO* 03
	061: XEQ 03		// Set up the stack for our output
	062: RCL 03
	063: RCL- 02
	064: RCL 03
	065: RTN
	066: LBL 04		// Calculate the first point from the xi
	067: iC ->04
	068: RCL* 00
	069: RCL+ 01
	070: FILL
	071: RTN
	072: LBL 05		// Calculate the second point from the xi
	073: RCL 01
	074: iC ->04
	075: RCL* 00
	076: -
	077: FILL
	078: RTN
	079: LBL 06		// Do a Kronrod accumulation, f(xi) in X
	080: RCL 04		// i, f, ?, ?
	081: INC X		// i+1, f, ?, ?
	082: iC ->X		// ki, i+1, f, ?
	083: STO L
	084: RCL Z		// f, ki, i+1, f
	085: FILL		// f, f, f, f
	086: RCL* L		// ki*f, f, f, f
	087: STO+ 03
	088: RTN
	089: LBL 07		// Gauus Kronrod accumulation, f(xi) in X
	090: RCL 04
	091: INC X		// I+1, f, ?, ?
	092: RCL Y		// f, I+1, f, ?
	093: RCL X		// f, f, I+1, f
	094: iC ->Z		// gi, f, f, I+1
	095: INC T		// gi, f, f, I+2
	096: *			// gi*f, f, I+2, I+2
	097: STO+ 02
	098: DROP		// f, I+2, I+2, I+2
	099: iC ->Z		// ki, f, I+2, I+2
	100: *			// ki*f, I+2, I+2, I+2
	101: STO+ 03
	102: RTN
	103: LBL 09		// Initial estimates equal, integral is zero
	104: XEQ 03
	105: iC 00		// Zero
	106: ENTER
	107: STO L
	108: RTN
	109: LBL 08		// A value or limit is NaN
	110: XEQ 03
	111: # NaN
	112: ENTER
	113: STO L
	114: RTN
	115: LBL 02		// A value is NaN after the Gauss estimate
	116: XEQ 03
	117: # NaN
	118: RCL 02
	119: STO L
	120: RTN
	121: LBL 03		// Restore the integration limits
	122: RCL 01
	123: RCL- 00
	124: RCL 01
	125: RCL+ 00		// l, u
	126: RTN
	127: LBL 00
	128: RTN
Checksum: 



We're using a Gauss-Kronrod quadrature with 10 Guass points and
21 Kronrod points.  We calculate the Guass quadrature first so we
can give an estimate if an error occurs during the extra evaluations
of the Kronrod quadrature.  The integrator relies on a four level
stack being set.  This is always true for the internal integrator,
however the code above will require modification to work with an
eight level stack.


On entry the stack looks like:
     Y       lower limit
     X       upper limit

On return the stack looks like:
     L       integral (Gauss)
     I       unchanged

     T       lower limit (Y on input)
     Z       upper limit (X on input)
     Y       error estimate (Gauss - Kronrod)
     X       integral (Kronrod)


Register use:
	00	Half interval length
	01	Mid-point of interval
	02	Gauss summation
	03	Kronrod summation
	04	Loop index


