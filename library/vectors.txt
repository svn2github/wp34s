This file is part of 34S.

34S is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

34S is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with 34S.  If not, see <http://www.gnu.org/licenses/>.



This is a basic suite of three dimensional vector operations for the WP 34S.

	001:  LBL'X.Y'
	002:  cpx Rv
	003:  STO J
	004:  RCL*T
	005:  R^
	006:  STO I
	007:  RCL*T
	008:  +
	009:  R^
	010:  ENTER
	011:  RCL*T
	012:  RCL+Z
	013:  STO Z
	014:  DROP
	015:  STO L
	016:  DROP
	017:  RTN
	018:  LBL'V+'
	019:  cpx Rv
	020:  STO J
	021:  RCL+ T
	022:  R^
	023:  STO I
	024:  RCL+ T
	025:  R^
	026:  RCL+ T
	027:  RTN
	028:  LBL'V-'
	029:  cpx Rv
	030:  STO J
	031:  CHS
	032:  RCL+T
	033:  R^
	034:  STO I
	035:  CHS
	036:  RCL+T
	037:  R^
	038:  CHS
	039:  RCL+T
	040:  RCL L
	041:  CHS
	042:  STO L
	043:  DROP
	044:  RTN
	045:  LBL'V<->'
	046:  cpx Rv
	047:  x<> T
	048:  cpx R^
	049:  cpx x<> L
	050:  RTN
	051:  LBL'Vun'
	052:  XEQ 00
	053:  1/x
	054:  LBL'V*S'
	055:  STO*Y
	056:  STO*Z
	057:  STO*T
	058:  STO L
	059:  DROP
	060:  RTN
	061:  LBL'VAB'
	062:  XEQ 00
	063:  X<> T
	064:  STO J
	065:  DROP
	066:  cpx STO L
	067:  cpx DROP
	068:  RTN
	069:  LBL 00
	070:  ENTER
	071:  x^2
	072:  RCL z
	073:  RCL*t
	074:  +
	075:  RCL t
	076:  RCL*t
	077:  +
	078:  SQRT
	079:  RTN
	080:  LBL'V+-'
	081:  cpx Rv
	082:  STO J
	083:  CHS
	084:  cpx R^
	085:  cpx CHS
	086:  RTN
	087:  LBL'VLx'
	088:  RCL J
	089:  cpx RCL L
	090:  RTN
	091:  LBL'X[times]Y'
	092:  STO C
	093:  RCL* B
	094:  RCL T
	095:  RCL* T
	096:  -
	097:  x<>y
	098:  STO I
	099:  RCL* T
	100:  RCL A
	101:  RCL* D
	102:  -
	103:  x<>z
	104:  STO J
	105:  RCL* A
	106:  RCL B
	107:  RCL* I
	108:  -
	109:  R^
	110:  STO L
	111:  Rv
	112:  RTN


As a rule a vector occupies a triple of stack registers usually X, Y & Z or
T, A & B.  Scalars occupy one stack level.  Operations save their first
argument to last X (L for scalars and L, I & J for vectors).


The function provided here are:

X.Y
	Vector dot product.  Input vectors in X,Y,Z and T,A,B.
	Output scalar in X.  Second vector unchanged in Y,Z,T and
	the first vector in L,I,J.

	result = X*T + Y*A + Z*B


V+
	Vector addition.  Input vectors in X,Y,Z and T,A,B.
	Output vector in X,Y,Z.  Second vector unchanged in T,A,B.
	The first vector is saved in L,I,J.


V-
	Vector subtraction.  Behaviour as for V+.


V<->
	Vector swap.  Swaps X,Y,Z with T,A,B.


Vun
	Unit vector from vector.  Replaces X,Y,Z with the equivalent
	unit vector.  Saves the recprocal of the vectors length in L.
	To undo this operation:
		RCL L
		1/x
		V*S


V*S
	Vector multipled by scalar.  Vector in Y,Z,T and scalar in X.
	Saves the scalar in L.


VAB
	Vector absolute value (modulus).  Vector in Y,Z,T.  Returns
	the length in X (dropping the vector).  The original vector
	is saved in L,I,J.


V+-
	Vector change sign.  Replaces the vector in X,Y,Z with its
	negative.  The original vector is saved in L,I,J.


VLX
	Vector equivalent of LastX.  Pushes a vector stored in L,I,J onto
	the stack.

XxY
	Vector cross product.  Input vectors in X,Y,Z and T,A,B.
	Output vector in X,Y,Z.  Second vector unchanged in T,A,B and
	the first vector saved in L,I,J.  Uses stack registers C & D
	for temporaty storage.
