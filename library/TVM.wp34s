/* This file is part of 34S.
 * 
 * 34S is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 34S is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
=====================================
* Extended TVM-Solver for the WP34s *
=====================================

Keyboard-Layout:
----------------
  N      PV    PMT     FV
[ A ]  [ B ]  [ C ]  [ D ]

  NP     NI     I
[STO]  [RCL]  [ Rv]
     \   |   /
       [XEQ]

Flags/Registers/Labels:
-----------------------
       00     01   02   03   04   05   06   07   08   09   Stack
Flag   Entry? --   --   --   --   --   <0?  =0?  --   --
Reg.   I2     N    I    PV   PMT  FV   NP   NI   i    k
Lbl.   Start  N?   I?   PV?  PMT? FV?  Init I->i SLV  TVM

Remarks:
========
- program 'TVM' should be loaded into and called from RAM
- [XEQ]'TVM' at first to initialize registers and parameters
- enter values for parameters NP,NI if desired (default=1)
- all financial keys for N,PV,PMT,FV and NP,NI,I work as follows:
  input+key stores the value, key alone calculates the value
  (or just recalls it for NP and NI)
- [R/S] resets the ENTRY? flag (e.g. after own calculations)
- alternative method to use the program:
  [STO/RCL/XEQ]01-05 to store/recall/calculate N,I,PV,PMT,FV
    (result after [XEQ] is not stored automatically!)
  [STO/RCL]06-07 to store/recall NP,NI
- a different 2nd initial guess for I (default=1%) can be entered
  in R00 if the solver fails (the 1st guess 0% is hard-coded)
- error messages are displayed if invalid values have been entered:
  (don't use [R/S] after any error message!)
    NP=0 -> "invalid parameter"
    both N=0 and I=0 -> "invalid data"
    calculate FV if N=0 -> "bad mode"
    no solution found for I -> "out of range"
    other invalid values -> "domain error" or "+/- infinity"

Values:
-------
N = total number of periods (or payments)
    N=0 for perpetual payments (N=infinite)
        (not allowed if I=0! -> Error: "invalid data")

I = annual interest rate (in % per year)
    I=0 for no compounding
        (not allowed if N=0! -> Error: "invalid data")

PV  = present value (or payment)
PMT = periodical payment
FV  = future value (or payment)
      (not defined for N=0! -> Error: "bad mode")

Parameters:
-----------
NP = payment frequency PF (payment periods per year)
     NP>0 postnumerand payments (at END of periods)
     NP<0 prenumerand payment (at BEGin of periods)
     NP=0 not allowed! -> Error: "invalid parameter"

NI = compounding frequency CF (interest periods per year)
     NI>0 decursive interest (compound at end of periods)
     NI<0 anticipative discount (compound at begin of periods)
     NI=0 continuous (theoretical) compounding (NI=infinite)
     |NI|=1 -> effective interest rate
     |NI|>1 -> nominal interest rate

*/

	001 LBL'TVM'    // extended TVM-Solver
	002 CL[alpha]
	003 [alpha] T
	004 [alpha] V
	005 [alpha] M
	006 [alpha] [space]
	007 [alpha] S
	008 [alpha] l
	009 [alpha] v
	010 [alpha]VIEW
	011 .     	// Initialize registers & parameters
	012 1
	013 R-CLR
	014 1
	015 STO 00      // I2=1% (2nd initial guess for I solver)
	016 STO 06      // NP=1  (annual payments at END of year or period)
	017 STO 07      // NI=1  (annual compounding at end of year or period)
	018 CLSTK
	019 LBL 00      // return after input or calculation
	020 FS?C 00
	021 SKIP 04
	022 RCL- X
	023 FILL
	024 RCL L
	025 STOP     	// wait for input or calculation
	026 BACK 01     // [R/S] -> clears ENTRY? flag
	027 LBL A
	028 ENTRY?
	029 SF 00
	030 FC? 00
	031 XEQ 01
	032 STO 01
	033 GTO 00
	034 LBL B
	035 ENTRY?
	036 SF 00
	037 FC? 00
	038 XEQ 03
	039 STO 03
	040 GTO 00
	041 LBL C
	042 ENTRY?
	043 SF 00
	044 FC? 00
	045 XEQ 04
	046 STO 04
	047 GTO 00
	048 LBL D
	049 ENTRY?
	050 SF 00
	051 FC? 00
	052 XEQ 05
	053 STO 05
	054 GTO 00
	055 LBL 21
	056 ENTRY?
	057 SF 00
	058 FC?S 00
	059 RCL 06
	060 STO 06
	061 GTO 00
	062 LBL 22
	063 ENTRY?
	064 SF 00
	065 FC?S 00
	066 RCL 07
	067 STO 07
	068 GTO 00
	069 LBL 23
	070 ENTRY?
	071 SF 00
	072 FC? 00
	073 XEQ 02
	074 STO 02
	075 GTO 00
	076 LBL 01      // N=?
	077 XEQ 07
	078 x=0?
	079 SKIP 14
	080 RCL 04
	081 RCL[times] 09
	082 RCL/ 08
	083 RCL- 05
	084 RCL L
	085 RCL+ 03
	086 x=0?
	087 SKIP 09
	088 /
	089 LN
	090 x[<->]y
	091 LN1+x
	092 /
	093 SKIP 03
	094 RCL- 03
	095 RCL- 05
	096 RCL/ 04
	097 RTN
	098 LBL 02      // I=?
	099 XEQ 06
	100 RCL 01
	101 x[!=]0?
	102 SKIP 07
	103 RCL+ 03
	104 FS? 06
	105 RCL+ 04
	106 RCL/ 04
	107 1/x
	108 +/-
	109 SKIP 11
	110 RCL[times] 04
	111 RCL+ 03
	112 RCL+ 05
	113 x=0?
	114 SKIP 06
	115 0     	// I1=0% (1st initial guess for I solver)
	116 RCL 00      // I2=1% (2nd initial guess for I solver)
	117 XEQ 07
	118 SLV 08      // call iterative solver
	119 SKIP 01
	120 ERR 08      // no solution found for I! -> Error: "out of range"
	121 x=0?
	122 SKIP 10
	123 LN1+x       // i -> I
	124 RCL 06
	125 ABS
	126 [times]
	127 FS? 07
	128 SKIP 03
	129 RCL/ 07
	130 e[^x]-1
	131 RCL[times] 07
	132 SDL 02
	133 RTN
	134 LBL 03      // PV=?
	135 XEQ 07
	136 x=0?
	137 SKIP 16
	138 RCL 04
	139 RCL[times] 09
	140 RCL/ 08
	141 RCL 01
	142 x=0?
	143 SKIP 08
	144 RCL Y
	145 RCL- 05
	146 x[<->]y
	147 RCL 08
	148 LN1+x
	149 [times]
	150 e[^x]
	151 /
	152 RCL- Y
	153 SKIP 05
	154 RCL- 01
	155 x=0?
	156 ERR 18      // N=0 and I=0! -> Error: "invalid data"
	157 RCL[times] 04
	158 RCL- 05
	159 RTN
	160 LBL 04      // PMT=?
	161 XEQ 07
	162 x=0?
	163 SKIP 11
	164 RCL 01
	165 x=0?
	166 SKIP 04
	167 0
	168 STO 04
	169 XEQ 09
	170 SKIP 10
	171 RCL 03
	172 RCL[times] 08
	173 RCL/ 09
	174 SKIP 06
	175 RCL 01
	176 x=0?
	177 ERR 18      // N=0 and I=0! -> Error: "invalid data"
	178 RCL 03
	179 RCL+ 05
	180 RCL/ 01
	181 +/-
	182 RTN
	183 LBL 05      // FV=?
	184 XEQ 07
	185 RCL 01
	186 x=0?
	187 ERR 13      // FV invalid for N=0! -> Error: "bad mode"
	188 x[<->]y
	189 x=0?
	190 SKIP 11
	191 LN1+x
	192 [times]
	193 e[^x]
	194 RCL 04
	195 RCL[times] 09
	196 RCL/ 08
	197 STO Z
	198 RCL+ 03
	199 [times]
	200 -
	201 SKIP 03
	202 RCL- 04
	203 [times]
	204 RCL- 03
	205 RTN
	206 LBL 06      // check parameters (NP,NI)
	207 RCL 06
	208 x=0?
	209 ERR 16      // NP=0! -> Error: "invalid parameter"
	210 CF 06
	211 x<0?
	212 SF 06       // set payments at begin of period (BEGin mode)
	213 RCL 07
	214 CF 07
	215 x=0?
	216 SF 07       // set continuous (theoretical) compounding
	217 RTN
	218 LBL 07      // I -> i,k
	219 XEQ 06
	220 1
	221 STO 09
	222 RCL[times] 02
	223 x=0?
	224 SKIP 12
	225 SDR 02
	226 FS? 07
	227 SKIP 03
	228 RCL/ 07
	229 LN1+x
	230 RCL[times] 07
	231 RCL 06
	232 ABS
	233 /
	234 e[^x]-1
	235 FS? 06
	236 STO+ 09
	237 STO 08
	238 RTN
	239 LBL 08      // SLV routine for i
	240 STO 08
	241 1
	242 STO 09
	243 DROP
	244 FS? 06
	245 STO+ 09
	246 DROP
	247 LBL 09      // TVM equation
	248 RCL 03
	249 RCL+ 05
	250 RCL 08
	251 x=0?
	252 SKIP 09
	253 LN1+x
	254 RCL[times] 01
	255 e[^x]-1
	256 /
	257 RCL+ 03
	258 RCL[times] 08
	259 RCL/ 09
	260 RCL+ 04
	261 SKIP 03
	262 RCL+ 01
	263 RCL[times] 04
	264 +
	265 RTN
