/*

=================================
* Extended TVM-Solver for WP34s *      Ver. 3.0      Author: Franz Huber
=================================

Keyboard-Layout:
----------------
    N       I      PV      PMT      FV
[A][A]  [A][B]  [A][C]  [A][D]  [A][->]

    NP        NI
[A][STO]  [A][RCL]

Flags/Registers/Labels:
-----------------------
       00     01   02   03   04   05   06   07   08   09   10   11  12
Flag   Entry? --   2I?  --   --   --   <0?  =0?  --   --   --   --  --
Reg.   Key?   N    I    PV   PMT  FV   NP   NI   i    k    im   I1  I2
Lbl.   Start  N?   I?   PV?  PMT? FV?  Init I->i TVM TVM' i->I  --  --

Remarks:
========
- [XEQ]'TVM' to initialize registers and parameters!
- enter values for parameters NP,NI if desired (default=1)
- all financial keys for N,I,PV,PMT,FV and NP,NI work as follows:
  input+key stores the value, key alone calculates the value
  (or just recalls it for NP and NI)
- [R/S] resets the ENTRY? flag (e.g. after own calculations)
- alternative method to use the program:
  [STO/RCL/XEQ]01-05 to store/recall/calculate N,I,PV,PMT,FV
  (result after [XEQ] is not stored automatically!)
  [STO/RCL]06-07 to store/recall NP,NI
- iterative solving for I is limited to [-.999,max(2,I%->i)], i.e.
  from -99.9% to 200% (or I%->i) interest rate per payment period
  (the upper limit I% can be changed with I [STO]02 or I [A][B])
- if solving for I returns 2 possible solutions ("I1="), then just 
  press [R/S] to switch between I1 and I2 (stored in R11 and R12)
- error messages are displayed if invalid values have been entered:
  (don't use [R/S] after any error message!)
    NP=0 -> "Invalid parameter"
    both N=0 and I=0 -> "Invalid data"
    calculate FV if N=0 -> "Bad mode"
    no solution found for I -> "No root found"
    other invalid entries -> "Domain error" or "+/- Infinity"

Values:
-------
N = total number of periods (or payments)
    N=0 for perpetual payments (N=infinite)
        (not allowed if I=0! -> Error: "Invalid data")

I = annual interest rate (in % per year, -99.9%..999%)
    I=0 for no compounding
        (not allowed if N=0! -> Error: "Invalid data")

PV  = present value (or payment)
PMT = periodical payment
FV  = future value (or payment)
      (not defined for N=0! -> Error: "Bad mode")

Parameters:
-----------
NP = payment frequency PF (payment periods per year)
     NP>0 postnumerand payments (at END of periods)
     NP<0 prenumerand payments (at BEGin of periods)
     NP=0 not allowed! -> Error: "Invalid parameter"

NI = compounding frequency CF (interest periods per year)
     NI>0 decursive interest (compound at end of periods)
     NI<0 anticipative discount (compound at begin of periods)
     NI=0 continuous (theoretical) compounding (NI=infinite)
     |NI|=1 -> effective interest rate
     |NI|>1 -> nominal interest rate

Used formulas:
--------------

    /  (1+I/(100*NI))^(NI/abs(NP))-1  for NI!=0
i = |
    \  e^(I/(100*abs(NP)))-1          for NI=0

    /  1    for NP>0
k = |
    \  1+i  for NP<0

          /  PV*(1+i)^N + PMT*((i+1)^N-1)*k/i + FV = 0  for I!=0 & N!=0
TVM eqn:  |  PV + PMT*N + FV = 0                        for I=0
          \  PV + PMT*k/i = 0                           for N=0

TVM expr: ((1+i)^N-1)*(PMT/i + beg?PMT + PV) + PV + FV  (SLV iteration for i)

*/

001 LBL'TVM'    // extended TVM-Solver V3.0
002 CL[alpha]
003 [alpha]'TVM'
004 [alpha] [space]
005 [alpha]'Sol'
006 [alpha]'ver'
007 VIEW[alpha]
008 # 013       // Initialize registers & parameters
009 SDR 02
010 R-CLR
011 1
012 STO 06	// NP=1 (annual payments at END of year or period)
013 STO 07	// NI=1 (annual compounding at end of year or period)
014 CLSTK

015 LBL 00	// return after input or calculation
016 FS?C 00
017 SKIP 003
018 STO L
019 CLSTK	// remove intermediate results
020 RCL L
021 STOP	// wait for input or calculation
022 BACK 001	// [R/S] -> clears ENTRY? flag

023 LBL A	// prefix [A] for [A]..[->]
024 CL[alpha]
025 [alpha]'N[narrow-space][narrow-space]'
026 [alpha]'I[narrow-space][narrow-space]'
027 [alpha]'PV[narrow-space]'
028 [alpha]'PMT'
029 [alpha]'[narrow-space]FV'
030 ENTRY?
031 SKIP 002
032 VIEW[alpha]
033 SKIP 001
034 VW[alpha]+ X
035 PSE 99
036 CL[alpha]
037 KEY? 00
038 SKIP 002
039 LBL?[->]00
040 XEQ[->]00
041 GTO 00

042 LBL 11
043 ENTRY?
044 SF 00
045 FC? 00
046 XEQ 01
047 STO 01
048 CL[alpha]
049 [alpha]'N='
050 VW[alpha]+ 01
051 RTN

052 LBL 12
053 CF 02
054 ENTRY?
055 SF 00
056 FC? 00
057 XEQ 02
058 STO 02
059 CL[alpha]
060 FC? 02
061 SKIP 007
062 x=? 11
063 [alpha]'I1='
064 x=? 12
065 [alpha]'I2='
066 PROMPT
067 x[<->] Y
068 BACK 010
069 [alpha]'I='
070 VW[alpha]+ 02
071 RTN

072 LBL 13
073 ENTRY?
074 SF 00
075 FC? 00
076 XEQ 03
077 STO 03
078 CL[alpha]
079 [alpha]'PV='
080 VW[alpha]+ 03
081 RTN

082 LBL 14
083 ENTRY?
084 SF 00
085 FC? 00
086 XEQ 04
087 STO 04
088 CL[alpha]
089 [alpha]'PMT'
090 [alpha] =
091 VW[alpha]+ 04
092 RTN

093 LBL 15
094 ENTRY?
095 SF 00
096 FC? 00
097 XEQ 05
098 STO 05
099 CL[alpha]
100 [alpha]'FV='
101 VW[alpha]+ 05
102 RTN

103 LBL 21
104 ENTRY?
105 SF 00
106 FC?S 00
107 RCL 06
108 STO 06
109 CL[alpha]
110 [alpha]'NP='
111 VW[alpha]+ 06
112 RTN

113 LBL 22
114 ENTRY?
115 SF 00
116 FC?S 00
117 RCL 07
118 STO 07
119 CL[alpha]
120 [alpha]'NI='
121 VW[alpha]+ 07
122 RTN

123 LBL 01	// N=?
124 XEQ 06
125 XEQ 07
126 x=0?
127 SKIP 014
128 RCL 04
129 RCL[times] 09
130 RCL/ 08
131 RCL- 05
132 RCL L
133 RCL+ 03
134 x=0?
135 SKIP 009
136 /
137 LN
138 x[<->] Y
139 LN1+x
140 /
141 SKIP 003
142 RCL- 03
143 RCL- 05
144 RCL/ 04
145 RTN

146 LBL 02	// I=?
147 XEQ 06
148 RCL 01
149 x[!=]0?
150 SKIP 006
151 RCL- 04	// N=0
152 RCL 03
153 FS? 06
154 RCL+ 04
155 /
156 GTO 10
157 RCL 04
158 x[!=]0?
159 SKIP 006
160 RCL- 05	// PMT=0
161 RCL/ 03
162 RCL 01
163 XROOT
164 DEC X
165 GTO 10
166 1
167 SDR 03
168 DEC X       // lower limit: -99.9%
169 STO 11
170 XEQ 08
171 x[!=]0?     // yl!=0?
172 SKIP 005
173 1
174 SDR 04
175 +/-
176 RCL+ 11
177 BACK 008
178 STO 10      // yl
179 RCL 02
180 XEQ 07
181 2
182 MAX         // upper limit: max(200%,I%->i)
183 STO 12
184 XEQ 08
185 x[!=]0?     // yr!=0?
186 SKIP 004
187 1
188 SDR 03
189 RCL+ 12
190 BACK 007
191 RCL[times] 10
192 x<0?        // yr*yl<0?
193 SKIP 044    // one solution
194 RCL 11
195 XEQ 09
196 RCL[times] 10
197 x[>=]0?     // yl'*yl>=0?
198 ERR 20      // no solution!
199 x[<->] L
200 RCL 12
201 XEQ 09
202 [times]
203 x[>=]0?     // yl'*yr'>=0?
204 ERR 20      // no solution!
205 RCL 11
206 RCL 12
207 SLV 09      // solve TVM'=0
208 SKIP 001
209 ERR 20
210 x[<->] 10
211 RCL 10
212 XEQ 08
213 x=0?
214 SKIP 021    // double-solution
215 [times]
216 x[>=]0?     // yl*ym>=0?
217 ERR 20      // no solution!
218 RCL 11
219 RCL 10
220 SLV 08      // solve TVM=0 (1st solution)
221 SKIP 001
222 ERR 20
223 XEQ 10
224 STO 11
225 RCL 10
226 RCL 12
227 SLV 08      // solve TVM=0 (2nd solution)
228 SKIP 001
229 ERR 20
230 XEQ 10
231 STO 12
232 CLSTK
233 [cmplx]RCL 11
234 SF 02
235 SKIP 026
236 RCL 10      // double-solution
237 GTO 10
238 RCL 11      // one solution
239 RCL 12
240 SLV 08	// solve TVM=0
241 SKIP 001
242 ERR 20
243 LBL 10	// i -> I
244 1
245 +/-
246 x[<->] Y
247 x=? Y
248 SKIP 010
249 x=0?
250 SKIP 011
251 LN1+x
252 RCL 06
253 ABS
254 [times]
255 FS? 07
256 SKIP 003
257 RCL/ 07
258 e[^x]-1
259 RCL[times] 07
260 SDL 02
261 RDP 12
262 RTN

263 LBL 03	// PV=?
264 XEQ 06
265 XEQ 07
266 x=0?
267 SKIP 016
268 RCL 04
269 RCL[times] 09
270 RCL/ 08
271 RCL 01
272 x=0?
273 SKIP 008
274 RCL Y
275 RCL- 05
276 x[<->] Y
277 RCL 08
278 LN1+x
279 [times]
280 e[^x]
281 /
282 RCL- Y
283 SKIP 005
284 RCL- 01
285 x=0?
286 ERR 18	// N=0 and I=0! -> Error: "Invalid data"
287 RCL[times] 04
288 RCL- 05
289 RTN

290 LBL 04	// PMT=?
291 XEQ 06
292 XEQ 07
293 x=0?
294 SKIP 014
295 RCL 01
296 x=0?
297 SKIP 007
298 RCL 03
299 RCL+ 05
300 RCL 08
301 LN1+x
302 RCL[times] 01
303 e[^x]-1
304 /
305 RCL+ 03
306 RCL[times] 08
307 RCL/ 09
308 SKIP 006
309 RCL 01
310 x=0?
311 ERR 18	// N=0 and I=0! -> Error: "Invalid data"
312 RCL 03
313 RCL+ 05
314 RCL/ 01
315 +/-
316 RTN

317 LBL 05	// FV=?
318 XEQ 06
319 0
320 x=? 01
321 ERR 13	// FV invalid for N=0! -> Error: "Bad mode"
322 STO 05
323 XEQ 07
324 XEQ 08
325 +/-
326 RTN

327 LBL 06	// check parameters (NP,NI)
328 RCL 06
329 x=0?
330 ERR 16	// NP=0! -> Error: "Invalid parameter"
331 CF 06
332 x<0?
333 SF 06	// set payments at begin of period (BEGin mode)
334 RCL 07
335 CF 07
336 x=0?
337 SF 07	// set continuous (theoretical) compounding
338 [cmplx]DROP
339 RTN

340 LBL 07	// I -> i,k
341 1
342 STO 09
343 RCL[times] 02
344 x=0?
345 SKIP 012
346 SDR 02
347 FS? 07

348 SKIP 003
349 RCL/ 07
350 LN1+x
351 RCL[times] 07
352 RCL 06
353 ABS
354 /
355 e[^x]-1
356 FS? 06
357 STO+ 09
358 STO 08
359 RTN

360 LBL 08	// TVM expression for SLV routine
361 STO 08
362 x[!=]0?
363 SKIP 003
364 RCL+ 01     // i=0
365 RCL 04
366 SKIP 008
367 LN1+x
368 RCL[times] 01
369 e[^x]-1
370 RCL 04
371 RCL/ 08
372 FS? 06
373 RCL+ 04
374 RCL+ 03
375 [times]
376 RCL+ 03
377 RCL+ 05
378 RTN

379 LBL 09	// TVM' expression for SLV routine
380 STO 08
381 x[!=]0?
382 SKIP 010
383 RCL+ 01     // i=0
384 DEC X
385 RCL[times] 01
386 2
387 /
388 FS? 06
389 RCL+ 01
390 RCL[times] 04
391 RCL+ 03
392 SKIP 21
393 LN1+x
394 RCL 01
395 DEC X
396 [times]
397 e[^x]
398 RCL[times] 01
399 RCL 04
400 RCL/ 08
401 FS? 06
402 RCL+ 04
403 RCL+ 03
404 [times]
405 RCL 08
406 LN1+x
407 RCL[times] 01
408 e[^x]-1
409 RCL[times] 04
410 RCL 08
411 x[^2]
412 /
413 -
414 END

