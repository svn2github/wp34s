/* This file is part of 34S.
 * 
 * 34S is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 34S is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
 */


/**************************************************************************/
/* Log Normal distribution
 */
 		XLBL"PDF_LOGNORMAL"
			xIN MONADIC
				LocR 01
				STO .00
				LN
				GSB pdf_normal
				RCL/ .00
			xOUT xOUT_NORMAL

#ifdef INCLUDE_CDFU
		XLBL"CDFU_LOGNORMAL"
			xIN MONADIC
				SPEC?
					JMP cdf_infinite
				x[<=]0?
					JMP ret_1
				LN
				JMP cdfu_normal
#endif

		XLBL"CDF_LOGNORMAL"
			xIN MONADIC
				SPEC?
					JMP cdf_infinite
				x[<=]0?
					JMP ret_0
				LN
				JMP cdf_normal

		XLBL"QF_LOGNORMAL"
			xIN MONADIC
				GSB qf_normal
				e[^x]
			xOUT xOUT_NORMAL

/**************************************************************************/
/* Normal distribution
 */
 		XLBL"PDF_NORMAL"
			xIN MONADIC
				GSB pdf_normal
			xOUT xOUT_NORMAL

pdf_normal::		GSB normal_param
			GSB pdf_q
			RCL/ K
			RTN

#ifdef INCLUDE_CDFU
		XLBL"CDFU_NORMAL"
			xIN MONADIC
cdfu_normal::		SF .00
			JMP cdf_norm_common
#endif

		XLBL"CDF_NORMAL"
			xIN MONADIC
cdf_norm_common::	SPEC?
				JMP cdf_infinite
cdf_normal::		GSB normal_param
#ifdef INCLUDE_CDFU
			FS? .00
				+/-
#endif
			JMP cdf_q_xout

normal_param::		RCL J
			GSB check_special
			-
			RCL K
			GSB check_special_pos
			/
			RTN

		XLBL"QF_NORMAL"
			xIN MONADIC
				GSB qf_normal
			xOUT xOUT_NORMAL

qf_normal::		GSB qf_q
			RCL K
			GSB check_special_pos
			[times]
			RCL J
			GSB check_special
			+
			RTN
#undef X


/**************************************************************************/
/* Standard Normal distribution
 */
		XLBL"PDF_Q"
			xIN MONADIC
pdf_q_xout::		GSB pdf_q
			xOUT xOUT_NORMAL

/* Standard entry point.  Uses one stack level and no last X */
pdf_q::			x[^2]
			Num half
			[times]
			+/-
			e[^x]
			Num [sqrt]2[pi]
			/
			RTN


#ifdef INCLUDE_CDFU
		XLBL"CDFU_Q"
			xIN MONADIC
			+/-
			JMP cdf_q_xout
#endif

		XLBL"CDF_Q"
			xIN MONADIC
cdf_q_xout::		GSB cdf_q
			xOUT xOUT_NORMAL

/* Standard entry point.  Destroys the stack.
 * Returns the CDF in X and the PDF in Y.
 */
cdf_q::			cdfqh
			_INT 1
			[cmplx][times]
			DROP
			RTN

#define R_P	.00
#define R_X	.01
#define R_I	.02
		XLBL"QF_Q"
			xIN MONADIC
qf_q_xout::		GSB qf_q
			xOUT xOUT_NORMAL

qf_q::			GSB qf_check_probability
			LocR 003
			STO R_P
			GSB qf_q_est
			STO R_X
			_INT 2
			FS? Flag_mode_double
				_INT 3
			STO R_I
qf_q_loop::		RCL R_X
			cdfqh		/* pdf a b */
			1/x
			RCL Z		/* b 1/pdf a b */
			RCL- R_P	/* b-p 1/pdf a b */
			_INT 1		/* 1 b-p 1/pdf a */
			[cmplx][times]	/* ? a+(b-p)/pdf */
			[<->] YYYY	/* t t t t */
#if 1
			// Dieter's series from A&X
			RCL R_X		/* x t t t */
			x[^2]		/* x^2 t t t */
			RCL+ X		/* 2x^2 t t t */
			INC X		/* 2x^2+1 t t t */
			_INT 6		/* 6 2xx+1 t t */
			SWAP
			/		/* (2xx+1)/6 t t */
			RCL[times] Y	/* t(2xx+1)/6 t t */
			Num half
			RCL[times] X	/* x/2 cubic t */
			+		/* x/2+cubix t */
			RCL[times] Y	/* t(x/2+cubix) t */
			INC X		/* 1+t(x/2+cubix) t */
			[times]
#else
			// Halley's method
			_INT 1
			RCL[times] R_X
			Num half
			[times]
			-
			/
#endif
			STO- R_X
			DSZ R_I
				JMP qf_q_loop
			RCL R_X
			RTN
#undef R_P
#undef R_X
#undef R_I


/* The internal Q qf entry point.
 */
qf_q_est::		LocR 02
			STO .00		// save x
			Num half
			SWAP
			-
			STO .01		// b = 1/2 - x
			x=0?
				RTN
			/* Estimate an initial try */
			x>0?
				JMP qf_q_inrange
			Num 1
			RCL- .00
			STO .00
			SF .00
qf_q_inrange::		RCL .00
			.
			2
			x<? Y
				JMP qf_q_skip2
			RCL .00
			LN
			RCL+ X
			+/-
			STO .01		// u = -2 LN(x)
			DEC X
			[sqrt]
			Num [sqrt]2[pi]
			[times]
			RCL[times] .00
			LN
			RCL+ X
			+/-
			[sqrt]
			x[<->] .01
			/
			RCL+ .01
			FC? .00
qf_q_neg_fin::			+/-
			RTN

qf_q_skip2::		Num [sqrt]2[pi]
			RCL[times] .01
			ENTER[^]
			x[^3]
			_INT 6
			/
			+
			JMP qf_q_neg_fin


