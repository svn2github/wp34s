/* The exposed functions in this file don't use the normal prologue/epilogue
 * and do not operate in double precision.  They call back to user code and
 * manage the stack, input, output and locals themselves.
 *
 * Changes to this will likely cause breakage.
 */

/**************************************************************************/
/* Integrate code
 * We're using a Gauss-Kronrod quadrature with 10 Guass points
 * and 21 Kronrod points.  We calculate the Guass quadrature
 * first so we can give an estimate if an error occurs during the
 * extra evaluations of the Kronrod quadrature.
 *
 * On entry the stack looks like:
 *	Y	lower limit
 *	X	upper limit
 *
 * On return the stack looks like:
 *	L	integral (Gauss)
 *	I	unchanged
 *
 *	T	lower limit (Y on input)
 *	Z	upper limit (X on input)
 *	Y	error estimate (Gauss - Kronrod)
 *	X	integral (Kronrod)
 *
 * Register use:
 * 0	half interval length
 * 1	interval midpoint
 * 2	Gauss sum
 * 3	Kronrod sum
 * 4	Index
 */

int_bad_range::		GSB int_restore_limits
			Num NaN
			ENTER[^]
			STO L
			RTN

int_zero_interval::	GSB int_restore_limits
			iC 0
			ENTER[^]
			STO L
			RTN


		XLBL"INTEGRATE"			/* Entry: INTEGRATE */
			GSB entry
			LocR 04				/* Need registers .00 to .04 */
			SPEC?
				JMP int_bad_range
			x[<->] Y
			SPEC?
				JMP int_bad_range
			x=? Y				/* Check if range is zero*/
				JMP int_zero_interval
			x[<->] Y

			/* Compute (x-y)/2 and (x+y)/2 */
			[cmplx]ENTER
			+
			2
			/
			x[<->] Z
			-
			2
			/
			[cmplx]STO .00			/* Also stores the midpoint */

			/* Initialise the summations */
			iC 0
			STO .02
			STO .03

			/* Loop through the common points */
			iC 15.02903
			STO .04

			/* Sum Gauss and Kronrod common points */
int_gkloop::		GSB int_first_point
			XEQUSR
			POPUSR
			SPEC?
				JMP int_bad_range
			GSB int_gauss
			GSB int_second_point
			XEQUSR
			POPUSR
			SPEC?
				JMP int_bad_range
			GSB int_gauss
			ISG .04
				JMP int_gkloop

			/* Evaluate at midpoint for the Kronrod estimate */
			RCL .00
			STO[times] .02
			RCL .01
			FILL
			XEQUSR
			POPUSR
			SPEC?
				JMP int_bad_range2
			iC 0.14944555
			[times]
			STO+ .03

			/* Now loop through the Kronrod points */
			iC 5.01402
			STO .04

			/* Sum Kronrod only points */
int_kloop::		GSB int_first_point
			XEQUSR
			POPUSR
			SPEC?
				JMP int_bad_range2
			GSB int_kronrod
			GSB int_second_point
			XEQUSR
			POPUSR
			SPEC?
				JMP int_bad_range2
			GSB int_kronrod
			ISG .04
				JMP int_kloop

			RCL .00
			STO[times] .03

			/* Set up the stack for our output */
			GSB int_restore_limits
			RCL .03
			RCL- .02				/* err, l, u, ?, G*/
			RCL .03				/* K, err, l, u, G*/
			RTN

			/* Calculate the first point from the xi */
int_first_point::	iC[->].04
			RCL[times] .00
			RCL+ .01
			FILL
			RTN

			/* Calculate the second point from the xi */
int_second_point::	RCL .01
			iC[->].04
			RCL[times] .00
			-
			FILL
			RTN

			/* Do a Kronrod accumulation, f(xi) in X */
int_kronrod::		RCL .04				/* i, f, ?, ?*/
			INC X				/* i+1, f, ?, ?*/
			iC[->]X				/* ki, i+1, f, ?*/
			STO L
			RCL Z				/* f, ki, i+1, f*/
			FILL				/* f, f, f, f*/
			RCL[times] L			/* ki*f, f, f, f*/
			STO+ .03
			RTN

			/* Gauus Kronrod accumulation, f(xi) in X */
int_gauss::		RCL .04		
			INC X				/* I+1, f, ?, ?*/
			RCL Y				/* f, I+1, f, ?*/
			RCL X				/* f, f, I+1, f*/
			iC[->]Z				/* gi, f, f, I+1*/
			INC T				/* gi, f, f, I+2*/
			[times]				/* gi*f, f, I+2, I+2*/
			STO+ .02
			DROP				/* f, I+2, I+2, I+2*/
			iC[->]Z				/* ki, f, I+2, I+2*/
			[times]				/* ki*f, I+2, I+2, I+2*/
			STO+ .03
			RTN

			/* A value is NaN after the Gauss estimate */
int_bad_range2:: 	GSB int_restore_limits
			Num NaN
			RCL .02
			STO L
			RTN

int_restore_limits::	RCL .01
			RCL- .00
			RCL .01
			RCL+ .00		/* l, u*/
			RTN

