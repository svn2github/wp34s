/**************************************************************************/
/* Cauchy distribution
 * Two parameters:
 *	J = location (real)
 *	K = scale > 0
 * Formulas:
 *	pdf = (PI K (1 + ((x-J) / K)^2) )^-1
 *	cdf = arctan((x-J) / K) / PI + 1/2
 *	qf = J + K TAN(PI (p - 1/2))
 */
		XLBL"PDF_CAUCHY"
			xIN MONADIC
			GSB cauchy_xform
			SPEC?
				JMP ret_0	/* Can only be infinite which has zero probability */
			RCL[times] X
			INC X
			RCL[times] K
			[pi]
			[times]
			1/x
			xOUT xOUT_NORMAL

		XLBL"CDF_CAUCHY"
			xIN MONADIC
			GSB cauchy_xform
			SPEC?
				JMP cdf_infinite
			ATAN
			[pi]
			/
			.
			5
			+
			xOUT xOUT_NORMAL

cauchy_xform::		RCL- J
			GSB check_special
			RCL K
			GSB check_special_pos
			/
			RTN

		XLBL"QF_CAUCHY"
			xIN MONADIC
			GSB check_probability
			.
			5
			-
			[pi]
			[times]
			TAN
			RCL K
			GSB check_special_pos
			[times]
			RCL+ J
			GSB check_special
			xOUT xOUT_NORMAL

/**************************************************************************/
/* Exponential distribution
 * One parameter:
 *	J = lambda (shape) > 0
 * Formulas:
 *	pdf = lambda exp(-lambda x)
 *	cdf = 1 - exp(-lambda x)
 *	qf = ln(1 - p) / -lambda
 */
		XLBL"PDF_EXPON"
			xIN MONADIC
			GSB expon_param
			SPEC?
				JMP ret_0	/* Can only be infinite which has zero probability */
			[times]
			x<0?
				JMP ret_0
			+/-
			e[^x]
			RCL[times] J
			xOUT xOUT_NORMAL

		XLBL"CDF_EXPON"
			xIN MONADIC
			GSB expon_param
			SPEC?
				JMP cdf_infinite
			[times]
			+/-
			e[^x]-1
			+/-
			xOUT xOUT_NORMAL

		XLBL"QF_EXPON"
			xIN MONADIC
			GSB check_probability
			GSB log1m
			GSB expon_param
			/
			+/-
			xOUT xOUT_NORMAL

expon_param::		RCL J
			GSB check_special_pos
			RTN


/**************************************************************************/
/* Logistic distribution
 * Two parameters:
 *	J = mu (location)
 *	K = s (scale) > 0
 * Formulas:
 *	pdf = 1 / ( (cosh( (x-J) / 2K ) )^2 * 4 K)
 *	cdf = 1/2 + tanh( (x-J) / 2K ) / 2 = (1 + tanh( (x-J) / 2K)) / 2
 *	qf = arctanh( (p-1/2) * 2) * 2K + j = archtanh(2p - 1) * 2K + J
 */
		XLBL"PDF_LOGIT"
xlbl_pdf_logit::	xIN MONADIC
			GSB logistic_param
			SPEC?
				JMP ret_0
			COSH
			x[^2]
			RCL[times] K
			4
			[times]
			1/x
			xOUT xOUT_NORMAL

		XLBL"CDF_LOGIT"		/* (1 + tanh( (x-J) / 2K)) / 2 */
xlbl_cdf_logit::	xIN MONADIC
			GSB logistic_param
			SPEC?
				GSB cdf_infinite
			x[<=]0?
				JMP ret_0
			TANH
			INC X
			2
			/
			xOUT xOUT_NORMAL

/* Extra the logistic rescaled parameter (x-J) / 2K */
logistic_param::	RCL- J
			GSB check_special
			RCL K
			GSB check_special_pos
			RCL+ X
			/
			RTN
			
		XLBL"QF_LOGIT"		/* archtanh(2p - 1) * 2K + J */
xlbl_qf_logit::		xIN MONADIC
			GSB check_probability
			RCL+ X
			DEC X
			ATANH
			RCL+ X
			RCL K
			GSB check_special_pos
			[times]
			RCL J
			GSB check_special
			+
			xOUT xOUT_NORMAL



/**************************************************************************/
/* Weibull distribution
 * Two parameters:
 *	J = lambda (shape) > 0
 *	K = k (scale) > 0
 * Formulas:
 *	pdf = k/J (x/J)^(k-1) exp(-(x/J)^k)  x>=0, 0 otherwise
 *	cdf = 1 - exp( -(x/J)^k)
 *	qf = (-ln(1-p) ^ (1/k)) * J
 */
		XLBL"PDF_WEIB"
			xIN MONADIC
			GSB weibull_param
			RCL Y
			SPEC?
				JMP ret_0
			x[<=]0?
				JMP ret_0
			x[<->] Y
			y[^x]
			STO Z
			+/-
			e[^x]
			RCL[times] Z
			RCL/ Y
			RCL[times] K
			RCL/ J
			xOUT xOUT_NORMAL

		XLBL"CDF_WEIB"
			xIN MONADIC
			GSB weibull_param
			x[<->] Y
			x[<=]0?
				JMP ret_0
			SPEC?
				JMP ret_1	/* only +infinte left */
			x[<->] Y
			y[^x]
			+/-
			e[^x]-1
			+/-
			xOUT xOUT_NORMAL

weibull_param::		RCL J
			GSB check_special_pos
			/
			RCL K
			GSB check_special_pos
			RTN

		XLBL"QF_WEIB"			/* (-ln(1-p) ^ (1/k)) * J */
			xIN MONADIC
			GSB check_probability
			GSB log1m
			+/-
			RCL K
			GSB check_special_pos
			1/x
			y[^x]
			RCL J
			GSB check_special_pos
			[times]
			xOUT xOUT_NORMAL

/**************************************************************************/
/* Utility conditional that checks if the argument is a valid probability or not */

cdf_infinite::		x<0?
				JMP ret_0
			JMP ret_1

check_probability::	NaN?
				JMP ret_NaN
			x<0?
				JMP ret_neginf
			x>1?
				JMP ret_posinf
			RTN
/* Error out if a number is zero, negative or special */
check_special_pos::	x[<=]0?
				ERR ERR_BAD_PARAM

/* Error out if a number is special */
check_special::		SPEC?
				ERR ERR_BAD_PARAM
			RTN

/**************************************************************************/
/* Some utility subroutines */

/* Log (1 - x) */
log1m::		+/-
		LN1+x
		RTN


