/**************************************************************************/
		XLBL"Bn_star"			/* Bernoulli number Bn* = +/- Bn(2 n) */
			GSB entry
			FP?
				ERR ERR_DOMAIN
			x[<=]0?
				ERR ERR_DOMAIN
			XLOCAL
			STOS .08
			STO+ X
			GSB bernoulli
			STO+ X
			ABS
			JMP zeta_exit

		XLBL"Bn"			/* Bernoulli number Bn = -n zeta(1-n), n>=0 */
			GSB entry
			FP?
				ERR ERR_DOMAIN
			x<0?
				ERR ERR_DOMAIN
			XLOCAL
			STOS .08
			x=0?
				JMP Bn_0
			x=1?
				JMP zeta_0
			ODD?
				JMP Bn_odd
			GSB bernoulli
			JMP zeta_exit

bernoulli::		STO 12
			DEC X
			+/-
			GSB zeta_int
			RCL[times] .08
			+/-
			RTN

Bn_odd::		iC 0
			JMP zeta_exit

Bn_0::			iC 1
			JMP zeta_exit

zeta_0::		.
			5
			+/-
			JMP zeta_exit

/**************************************************************************/
/* Zeta function implementation based on Jean-Marc Baillard's from:
 *	http://hp41programs.yolasite.com/zeta.php
 * This is the same algorithm as the C version uses, just with fewer terms and
 * with the constants computed on the fly.
 */
		XLBL"ZETA"			/* Zeta function */
			GSB entry
			XLOCAL
			STOS .08
			x=0?
				JMP zeta_0
			GSB zeta_int

zeta_exit::		x[<->] .08
			STO L
			RCLS .08
			RTN
		
zeta_int::		STO .01
			STO .07
			.
			5
			x[<=]? Y
				JMP zeta_calc

zeta_neg::		SIGN
			x[<->] Y
			-
			STO .01
			GSB zeta_calc
			iC 1
			ASIN
			RCL[times] .07
			SIN
			[times]
			[pi]		// Num [pi]
			STO/ Y
			STO+ X
			RCL .07
			y[^x]
			[times]
			x[<->] .01
			[GAMMA]
			RCL[times] .01
			RTN

zeta_calc::		2
			0
			STO .00
			STO .03
			SIGN
			STO .02
			STO .04
			STO .05
			+/-
			STO .06
			iC 0
zeta_loop::		RCL .05
			RCL .00
			RCL .01
			+/-
			y[^x]
			[times]
			RCL .06
			+/-
			STO .06
			[times]
			+
			RCL .00
			ENTER[^]
			STO+ Y
			STO[times] Y
			-
			RCL[times] .04
			RCL .03
			x[^2]
			RCL .00
			DEC X
			x[^2]
			-
			STO+ X
			/
			STO .04
			STO+ .05
			x[<->] Y
			DSE .00
				JMP zeta_loop

			RCL/ .05
			2
			LN
			iC 1
			RCL- .01
			[times]
			e[^x]-1
			/
			RTN
