/**************************************************************************/
/* The positive branch of the real W function.
 * A rough guess is made and then Newton's method is used to attain
 * convergence.  The C version works similarily but uses Halley's
 * method which converges a cubically instead of quadratically.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/lambertw.php
 */

		XLBL"W0"
xrom_w0::		xIN MONADIC
			SPEC?
				JMP LamW_NaN
			x=0?
				xOUT xOUT_NORMAL
			Num eE
			1/x
			+/-
			x[<->] Y
			x<? Y
				JMP LamW_NaN
			STO I
			LN1+x
LamW0_loop::		FILL
			+/-
			e[^x]
			RCL[times] I
			-
			x[<->] Y
			INC X
			/
			-
			CNVG? CVG_RELATIVE
				xOUT xOUT_NORMAL
			JMP LamW0_loop

/**************************************************************************/
/* The negative branch of the real W function.
 */

		XLBL"W1"
xrom_w1::		xIN MONADIC
			SPEC?
				JMP LamW_NaN
			x[>=]0?
				JMP LamW_inf
			+/-
			1/x
			STO I
			Num eE
			x>? Y
				JMP LamW_NaN
			RCL I
LamW1_loop::		STO J
			LN
			RCL[times] I
			RCL J
			x[<->] Y
			CNVG? CVG_RELATIVE
				JMP LamW_converged
			JMP LamW1_loop
LamW_converged::	RCL/ I
			+/-
			xOUT xOUT_NORMAL

LamW_inf::		x>0?
				JMP LamW_NaN
			FC? D
				ERR ERR_MINFINITY
			Num -[infinity]
			xOUT xOUT_NORMAL

LamW_NaN::		FC? D
				ERR ERR_DOMAIN
			Num NaN
			xOUT xOUT_NORMAL



/**************************************************************************/
/* The positive branch of the complex W function.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/lambertw.php
 *
 * Register use:
 *	.00/.01	z
 *	.02/.03	w
 *	J/K	temporary
 */
		XLBL"CPX_W0"
xrom_c_w::		xIN MONADIC_COMPLEX
			LocR 03
			[cmplx]STO .00
			iC 1
			STO .02
			STO .03
			+
			[cmplx]x=0?
				JMP LamW_cloop
			[cmplx]LN
			[cmplx]STO .02
LamW_cloop::		[cmplx]ENTER
			[cmplx]e[^x]
			[cmplx]STO J
			[cmplx]RCL[times] .02
			[cmplx]STO+ J
			[cmplx]RCL- .00
			[cmplx]RCL/ J
			[cmplx]STO- .02
			[cmplx]DROP
			[cmplx]RCL .02
			CNVG? CVG_COMPLEX
				xOUT xOUT_NORMAL
			JMP LamW_cloop

/**************************************************************************/
/* The inverse W function in both real and complex domains.
 * These can be done inline without the usual prelude and epilogue code.
 */

		XLBL"W_INVERSE"
xrom_winv::		xIN MONADIC
				e[^x]
				RCL[times] L
			xOUT xOUT_NORMAL

		XLBL"CPX_W_INVERSE"
xrom_c_winv::		xIN MONADIC_COMPLEX
				[cmplx]e[^x]
				[cmplx]RCL[times] L
			xOUT xOUT_NORMAL
