/* This file is part of 34S.
 * 
 * 34S is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * 34S is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
 */

/* NaN for all results */
/* This is a duplicate of ret_NaN but within range of the branches to it from this file */
w_ret_NaN::	FC? D
			ERR ERR_DOMAIN
		Num NaN
		FILL
		xOUT xOUT_NORMAL

/* return -infinite for all results */
/* This is a duplicate of ret_NaN but within range of the branches to it from this file */
w_ret_neginf::	FC? D
			ERR ERR_MINFINITY
		Num -[infinity]
		FILL
		xOUT xOUT_NORMAL


/**************************************************************************/
/* The positive branch of the real W function.
 * A rough guess is made and then Newton's method is used to attain
 * convergence.  The C version works similarily but uses Halley's
 * method which converges a cubically instead of quadratically.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/lambertw.php
 *
 * Uses regiser I for temproary storage.
 */

			XLBL"W0"
			xIN MONADIC
			SPEC?
				JMP w_ret_NaN
			x=0?
				xOUT xOUT_NORMAL
			Num eE
			1/x
			+/-
			x[<->] Y
			x<? Y
				JMP w_ret_NaN
			STO I
			LN1+x
LamW0_loop::		FILL
			+/-
			e[^x]
			RCL[times] I
			-
			x[<->] Y
			INC X
			/
			-
			CNVG? CVG_RELATIVE
				xOUT xOUT_NORMAL
			JMP LamW0_loop

/**************************************************************************/
/* The negative branch of the real W function.
 * Uses registesr J and K for temporary storage.
 */

			XLBL"W1"
			xIN MONADIC
			SPEC?
				JMP w_ret_NaN
			x>0?
				JMP w_ret_NaN
			x=0?
				JMP w_ret_neginf
			+/-
			1/x
			STO I
			Num eE
			x>? Y
				JMP w_ret_NaN
			RCL I
LamW1_loop::		STO J
			LN
			RCL[times] I
			RCL J
			x[<->] Y
			CNVG? CVG_RELATIVE
				JMP LamW_converged
			JMP LamW1_loop
LamW_converged::	RCL/ I
			+/-
			xOUT xOUT_NORMAL


/**************************************************************************/
/* The positive branch of the complex W function.
 *
 * This code is based on Jean-Marc Baillard's HP-41 version from:
 *	http://hp41programs.yolasite.com/lambertw.php
 *
 * Register use:
 *	.00/.01	z
 *	.02/.03	w
 *	.04/.05	temporary
 */
			XLBL"CPX_W0"
			xIN MONADIC_COMPLEX
			LocR 06
			[cmplx]STO .00
			Num 1
			STO .02
			STO .03
			+
			[cmplx]x=0?
				JMP LamW_cloop
			[cmplx]LN
			[cmplx]STO .02
LamW_cloop::		[cmplx]ENTER
			[cmplx]e[^x]
			[cmplx]STO .04
			[cmplx]RCL[times] .02
			[cmplx]STO+ .04
			[cmplx]RCL- .00
			[cmplx]RCL/ .04
			[cmplx]STO- .02
			[cmplx]DROP
			[cmplx]RCL .02
			CNVG? CVG_COMPLEX
				xOUT xOUT_NORMAL
			JMP LamW_cloop

/**************************************************************************/
/* The inverse W function in both real and complex domains.
 * These can be done inline without the usual prelude and epilogue code.
 */

			XLBL"W_INVERSE"
			xIN MONADIC
				e[^x]
				RCL[times] L
			xOUT xOUT_NORMAL

			XLBL"CPX_W_INVERSE"
			xIN MONADIC_COMPLEX
				[cmplx]e[^x]
				[cmplx]RCL[times] L
			xOUT xOUT_NORMAL
