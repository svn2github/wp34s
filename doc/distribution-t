I recently tried some improvements, especially with the solver. The
following ideas refer to the Student distribution, but they should
be applicable for the Chi^2 and Fisher cases as well. The following
thoughts assume the quantile is >= 0 and p is the upper tail probability
(i.e. p <= 0.5). As usual, the rest is done with a simple transformation,
e.g. QF(1-p) = -QF(p).

So, what can be done?

1. Use a Halley solver. It converges very fast and it can be implemented
easily since the second derivative is a function of the first (i.e. the
pdf).

Student:
f"(x) = -(n+1)x / (n+x^2) * pdf

Chi^2:
f"(x) = (n-x-2)/(2x) * pdf

Fisher:
f"(x) = -(n(m(x-1)+2) + 2mx) / (2x(mx+n)) * pdf

where n (resp. m and n) are the degrees of freedom.

So f"(x) simply is the pdf times a factor. This way a Halley iteration
e.g. for the Student case can be written as follows:

r := (StudentUpperCDF(x) - p) / StudentPDF
d := r / ( r * (n+1)x / 2(n+x^2) - 1 )
x := x - d

Due to the roughly cubic convergence, the iteration usually may quit as
soon as |d| < 1E-10*x for 30+ digit accuracy. In my 34s program I tried
a conservative CNVG 00 (i.e. rel. error < 1E-14) which usually returns
results that are as good as a user code program gets when running in DP
mode (approx 30-34 digits).

The same idea can be used with the Chi^2 and Fisher quantile.

2. I slightly modified the initial guess for the Chi^2 quantile and
I tried a new approach in the Student case, based on a 1992 paper on
bounds of various quantiles by Fujikoshi and Mukaihata. The idea is a
simple transformation of the normal quantile z:

t = [sqrt](n * (e^(a * z^2/n) - 1 ))

Where a is close to 1 and a function of n (or simply 1 so that it can be
omitted). I used a = 1 + 1/(e*n) which works very well with the Normal
estimate I used (simply the one in the Normal quantile function).

This works fine for the center but less so for the distribution tails. For
all p < 12^-n I use a slight modification of the tail approximation
suggested years ago:

u = 2 * p * n * [sqrt](pi / (2 * n - 0.75))
t = [sqrt](n) / u ^ (1 / n)

The 0.75 originally was a 1, but changing this value improves the results
for low n.

Although the Student estimate originally was intended for n>=3 it
also works well for n=2 or even n=1. Usually it converges within three
iterations, here and there in maybe four. This means that the code for
n=1 and n=2 (direct solutions) may be omitted.

For x close to 0 (i.e. p near 0.5) the expression t_u(x) - p loses
accuracy due to digit cancellation. So I used the same idea as in the
Normal quantile routine and had this value calculated differently for
small t, using the incomplete Beta function. Yes, that's why I found
the bug discussed in this thread. ;-)


    LBL 'TQF'  ' T Quantile Function
    ENTER      ' probability in X, degrees of freedom in register J
    +/-
    INC X
    MIN
    CF 00
    x!=? L
    SF 00       ' set flag 00 if p > 0.5
    CF 01       ' clear error flag
    STO 00      ' save p in R00
    # 005
    STO 01      ' do not more than 5 iterations
    # 012
    RCL J
    +/-
    y^x
    RCL 00
    x>? Y
    GTO 00
    RCL J       ' estimate for small p
    STO+ X
    [times]
    # pi
    RCL L
    # 1/2
    x[^2]
    RCL+ L    ' = 0.75
    -
    /
    [sqrt]
    [times]
    RCL J
    xrooty
    RCL J
    [sqrt]
    x<> Y
    /
    GTO 01
    LBL 00     ' estimate for low and moderate t
    XEQ 'GNQ'  ' get guess for the normal quantile
    x[^2]
    # eE
    RCL[times] J
    1/x
    INC X
    [times]
    RCL/ J
    e^x-1
    RCL[times] J
    [sqrt]
    LBL 01     ' iteration starts here
    FILL
    # 1/2
    x>? Y
    GTO 02
    DROP
    t[sub-u](x)     // ***** XROM
    RCL- 00
    GTO 03
    LBL 02
    DROP
    x[^2]
    ENTER
    RCL+ J
    /
    # 1/2
    RCL[times] J
    RCL L
    [<->] ZXYT
    I[sub-x]
    # 1/2
    [times]
    +/-
    # 1/2
    RCL- 00
    +          ' cdf(t) - p = (0,5-p) - 1/2 IBeta(x=t^2/(n+t^2), a=1/2, b=n/2)
    LBL 03
    RCL T
    t[sub-p](x)     // ***** XROM
    /
    ENTER
    RCL[times] T
    RCL J
    INC X
    [times]
    RCL T
    x[^2]
    RCL+ J
    STO+ X
    /
    DEC X
    /
    -
    CNVG? 00
    SKIP 003
    DSE 01
    GTO 01
    SF 01       ' Raise error flag if no convergence after 5 iterations
    FS?C 00
    +/-         ' adjust sign
    FS?C 01
    ERR 20      ' if error, display "no root found" and exit with last approximation
    END

    LBL 'GNQ'   ' input: p =< 0.5
    # 232       ' output: Normal estimate > 0
    SDR 003
    x<>Y
    x>? Y
    GTO 00
    FILL        'Normal estimate for p up to 0.232
    LN
    STO+ X
    +/-
    ENTER
    DEC X
    # pi
    [times]
    STO+ X
    [sqrt]
    RCL[times] T
    LN
    STO+ X
    +/-
    [sqrt]
    x<>Y
    # 004
    [times]
    1/x
    +
    RTN
    LBL 00   ' Normal estimate for p close to the center
    +/-
    # 1/2
    +
    # pi
    STO+ X
    [sqrt]
    [times]
    ENTER
    x[^3]
    # 006
    /
    +
    RTN
    END

For best accuracy this should run in DP mode. The program exits if the
last two approximations agree in approx. 14 digits. At this point the
result usually carries 30+ valid digits.

Here are some examples:

    10 STO J
       0,1 XEQ"TQF" => -1,372183641110335627219156967662554 in 3,2 s
       exact result:   -1,37218364111033562721915696766255392

     1E-20 XEQ"TQF" => -256,4346993185261855315362349874343 in 3,1 s
       exact result:   -256.434699318526185531536234987434334

     0,5 ENTER 1E-16 -
           XEQ"TQF" => -2,569978034930492409497513483729480 E-16 in 1,9 s
       exact result:   -2,56997803493049240949751348372947856 E-16

     1 STO J
     0,05  XEQ"TQF" => -6,313751514675043098979464244768186 in 3 s
       exact result:   -6,3137515146750430989794642447681860594

     1E-10 XEQ"TQF" => -3183098861,837906715272955512330630 in 1,9 s
       exact result:   -3183098861.837906715272955512330627466

    100 STO J
     0,025 XEQ"TQF" => -1,983971518523552286595184867990389 in 5,1 s
       exact result:   -1,983971518523552286595184867990339165

Please note that the results for n=1 are exact to 33 resp. 34 digits while
the current implementation (that calculates the result directly) gets only
32 resp. 24 (!) digits right. Either the internal tangent function is not
that accurate or the current implementation does not evaluate the quantile
as 1/tan(1E-10*180 degrees) which would yield a nearly perfect result. ;-)

Dieter



*LBL'NQF' // Normal quantile function
	XEQ'GNQ'
	CF 00
	x<0?
	SF 00     // save sign in flag 00
	x[<->] Y
	STO 00    // store min(p, 1-p)
	# 002
	STO 01    // not more than 2 iterations are required
	RCL Z
	ABS
	FILL
	INC X
	RSD 03
	x[!=]1?
		GTO 000
	DEC 01    // estimate < 0.005 requires just one iteration
	DROP
	SDL 016
	x>1?
		GTO 000
	DROP      // estimate < 5E-17 is already exact
	GTO 004
*LBL 000
	DROP
*LBL 001
	FILL
	x<1?      // any threshold between 0.254 and 1.28 should be ok
		GTO 002
	[PHI][sub-u](x)
	RCL- 00
	GTO 003   // large x: evaluate upper cdf(x) - p
	*LBL 002
	x[^2]     // small x: evaluate (0.5-p) minus integral from 0 to x
	# 1/2     // by means of the incomplete Gamma function
	[times]
	# 1/2
	I[GAMMA][sub-p]
	RCL[times] L
	+/-
	# 1/2
	RCL- 00
	+
*LBL 003
	x[<->] Y
	[phi](x)
	/
	ENTER[^]  // use extrapolation scheme as shown in Abramowitz & Stegun p. 954
	x[^3]
	RCL T
	x[^2]
	STO+ X
	INC X
	[times]
	# 006
	/
	# 1/2
	RCL[times] T
	RCL[times] Z
	RCL[times] Z
	+
	+
	+
	DSE 01
		GTO 001
	*LBL 004
	FS?C 00   // adjust sign
		+/-       // and exit
	END

*LBL'TQF' // Student's t quantile function
	ENTER[^]
	+/-
	INC X
	MIN
	CF 00
	x[!=]? L
		SF 00     // save sign in flag 00
	STO 00    // store min(p, 1-p)
	# 006
	STO 01    // do at most 6 iterations (usually 3 or 4)
	# 012
	RCL J
	+/-
	y[^x]
	RCL 00
	x>? Y    // threshold for tail estimate is p = 12^(-dof)
		GTO 000
	RCL J    // tail estimate for p close to 0 (or 1)
	STO+ X
	[times]
	# [pi]
	RCL L
	# 1/2
	x[^2]
	DEC X
	+
	/
	[sqrt]
	[times]
	RCL J
	[^x][sqrt]y
	RCL J
	[sqrt]
	x[<->] Y
	/
	GTO 001    // start iteration
*LBL 000
	XEQ'GNQ'   // estimate for all other p, *not* close to 0 or 1
	x[^2]      // t is a tranformation of the Normal z-quantile
	# eE
	RCL[times] J
	1/x
	INC X
	[times]
	RCL/ J
	e[^x]-1
	RCL[times] J
	[sqrt]
*LBL 001
    FILL
	# 1/2     // use different methods for evaluating cdf(t) - p
	x>? Y     // for t close or not close to the center
		GTO 002
	DROP
	t[sub-u](x)
	RCL- 00
	GTO 003
*LBL 002
    RCL[times] J  // X was 1/2, so this is n/2
    x[<->] Y
    x[^2]
    ENTER[^]
    RCL+ J
    /             // x = t^2/(t^2+n)
    # 1/2
    x[<->] Y      // stack now is  x  1/2  n/2  t
    I[sub-x]
    # 1/2
    [times]
    +/-
    # 1/2
    RCL- 00
    +
*LBL 003
	RCL T     // use Halley method for fast convergence
	t[sub-p](x)
	/
	ENTER[^]
	RCL[times] T
	RCL J
	INC X
	[times]
	RCL T
	x[^2]
	RCL+ J
	STO+ X
	/
	DEC X
	/
	-
	CNVG? 00  // if the last two approximations agree in 14 digits
		SKIP 003  // the latest result can be considered converged
	DSE 01
		GTO 001
	ERR 20    // quit with error if no convergence within 6 iterations
	FS?C 00
		+/-       // else set sign and exit
	END

*LBL'CQF' // Chi^2 quantile function
	x=0?
		RTN       // catch case p = 0
	STO 00
	# 006
	STO 01    // do at most 6 iterations (usually 3...4)
	# 019
	SDR 001   // threshold for lower tail estimate is 1/pi * 1.9^-n
	RCL J
	x=1?
		DEC X     // handle threshold for 1 dof separately (1/pi is fine)
	+/-
	y[^x]
	# [pi]
	/
	RCL 00
	x<? Y
		GTO 000   // jump to lower tail estimate
	XEQ'GNQ'  // else get correctly signed Normal quantile
	# 222     // and do a Wilson-Hilferty transformation
	SDR 003
	RCL/ J
	STO Z
	[sqrt]
	[times]
	INC X
	RCL- Y
	x[^3]
	RCL[times] J   // Wilson-Hilferty estimate
	# eE           // is adjusted for p close to 1
	RCL[times] J   // i.e. for Chi^2 > e*dof + 8
	# 008
	+
	x[<->] Y
	x<? Y          // Chi^2 not large?
		GTO 001        // then start iteration
	# 1/2          // otherwise adjust estimate
	[times]
	LN
	# 1/2
	RCL[times] J
	DEC X
	[times]
	+/-
	RCL 00
	+/-
	LN1+x
	+
	# 1/2
	RCL[times] J
	LN[GAMMA]
	+
	STO+ X
	+/-
	GTO 001
*LBL 000   // lower tail estimate
	RCL[times] J
	# 1/2
	[times]
	LN
	# 1/2
	RCL[times] J
	LN[GAMMA]
	+
	STO+ X
	RCL/ J
	e[^x]
	STO+ X
*LBL 001   // iteration starts here
	FILL       // uses Halley method for f(x) = ln(cdf(chi^2) / p)
	x[>=]? J   // with different methods for low and high Chi^2
		GTO 002
	[chi][^2]  // low Chi^2
	ENTER[^]
	RCL/ 00
	LN
	GTO 003    // provide lower cdf in Y and ln(cdf/p) in X
*LBL 002
	# 001
	ENTER[^]
	RCL- 00
	RCL Z
	[chi][^2][sub-u]
	STO- Z    // Z := 1-Z, i.e. upper cdf => lower cdf
	-
	RCL/ 00   // provide lower cdf in Y and ln1+x((1-p) - upper_cdf) / p) in X
	LN1+x     // the latter is mathematically equivalent to ln(lower_cdf/p)
*LBL 003
	x[<->] Y  // start Halley approximation
	RCL Z
	[chi][^2][sub-p]
	x[<->] Y
	/
	STO Z
	/
	RCL J
	DEC X
	DEC X
	RCL- T
	RCL/ T
	[<->] ZXYT  // all this can be done with four stack levels ;-)
	STO+ X
	-
	# 004
	/
	RCL[times] Y
	+/-
	INC X
	/
	-
	CNVG? 00  // if the last two approximations agree in 14 digits
		SKIP 003  // the latest result can be considered converged
	DSE 01
		GTO 001
	ERR 20    // quit with error if no convergence within 6 iterations
	END       // else exit

**LBL'GNQ'  // Provides a guess for the Normal quantile
	ENTER[^]    // input: 0 < p < 1
	+/-         // output: X = signed quantile, Y = min(p, 1-p)
	INC X       // max. absolute and relative error < 0.006
	MIN
	CF 01
	x[!=]? L
		SF 01       // save sign in flag 01
	# 002
	SDR 001     // threshold is 0.2  (was 0.23 before)
	x[<->] Y
	x[>=]? Y    // use different estimates for p < or > 0.2
		GTO 000
	FILL        // tail estimate for p < 0.2 or > 0.8
	LN
	STO+ X
	+/-
	ENTER[^]
	DEC X
	# [pi]
	[times]
	STO+ X
	[sqrt]
	RCL[times] T
	LN
	STO+ X
	+/-
	[sqrt]
	x[<->] Y
	# 132
	STO+ X
	SDR 003     // 0.264  (was 0.254 in earlier versions)
	x[<->] Y
	/
	+
	GTO 001
*LBL 000
	ENTER[^]    // central estimate for 0.2 < p < 0.8
	+/-
	# 1/2
	+
	# [pi]
	STO+ X
	[sqrt]
	[times]
	ENTER[^]
	x[^3]
	# 005       // was 6 in earlier versions
	/
	+
*LBL 001
	FS?C 01   // adjust sign
	+/-       // negative for p<0.5, positive for p>0.5
	END
